        -:    0:Source:C:/Users/JackyChang/Desktop/tutorial/RailSystem/src/List.adb
        -:    0:Programs:38
        -:    1:
        -:    2:-- The list is implemented using the CELL_PTR access type
        -:    3:-- of the CELL type. a Cell contatins the data of the user
        -:    4:-- and a link to the next CELL (which is null if is the last
        -:    5:-- element of the list).
        -:    6:with ada.Text_IO;
        -:    7:use ada.Text_IO;
        -:    8:
        -:    9:package body LIST is
        -:   10:
        -:   11:   -----------------------
        -:   12:   -- Local Subprograms --
        -:   13:   -----------------------
        -:   14:   ---------------
        -:   15:   -- CONTAINS --
        -:   16:   ---------------
      344:   17:   function CONTAINS (A: LIST_PTR; D: DATA_TYPE) return Boolean
        -:   18:   is
        -:   19:      size: Natural;
        -:   20:      contain:Boolean;
        -:   21:   begin
      344:   22:      size:= A.SIZE;
      344:   23:      contain:=False;
      344:   24:      for i in 1 .. size loop
      258:   25:         if i < A.MAX_SIZE then
      258:   26:            if A.ELEMENTS(i).ID /=0 then
      336:   27:               if A.ELEMENTS(i).DATA = D then
       26:   28:                  contain:= True;
       26:   29:                  return contain;
        -:   30:               end if;
        -:   31:            end if;
        -:   32:         end if;
        -:   33:
      232:   34:         pragma Loop_Invariant(contain = False);
      232:   35:      end loop;
      318:   36:      return contain;
        -:   37:   end CONTAINS;
        -:   38:
        -:   39:   -----------------------
        -:   40:   -- get last element  --
        -:   41:   -----------------------
        -:   42:
        -:   43:--     function GET_LAST(A: LIST_PTR) return DATA_TYPE
        -:   44:--     is
        -:   45:--     begin
        -:   46:--        return GET_ELEMENT(A        => A,
        -:   47:--                           LOCATION => A.SIZE);
        -:   48:--     end GET_LAST;
        -:   49:   ---------------------
        -:   50:   -- Delete element  --
        -:   51:   ---------------------
        -:   52:
       70:   53:   procedure DELETE_LAST(A: in out LIST_PTR)
        -:   54:   is
        -:   55:   begin
       70:   56:      if A.SIZE > 0 then
       70:   57:         A.SIZE := A.SIZE -1;
        -:   58:      end if;
        -:   59:
       70:   60:   end DELETE_LAST;
        -:   61:
        -:   62:   ---------------
        -:   63:   -- GET_SIZE  --
        -:   64:   ---------------
        -:   65:
     1803:   66:   function GET_SIZE ( A: LIST_PTR )
        -:   67:                      return Natural
        -:   68:   is
        -:   69:   begin
     1803:   70:      return A.SIZE;
        -:   71:   end GET_SIZE;
        -:   72:
        -:   73:   ---------------
        -:   74:   -- FULL  --
        -:   75:   ---------------
      838:   76:   function FULL ( A : in LIST_PTR) return Boolean is
        -:   77:   begin
      838:   78:      return A.SIZE = A.MAX_SIZE;
        -:   79:   end FULL;
        -:   80:   ---------------
        -:   81:   -- APPEND    --
        -:   82:   ---------------
        -:   83:
      838:   84:   procedure APPEND ( A: in out LIST_PTR; D: in DATA_TYPE; ID: in Natural)
        -:   85:   is
        -:   86:   begin
        -:   87:
        -:   88:      -- create a new cell to store the new element
      838:   89:      if not FULL(A) then
      838:   90:         if A.SIZE < A.MAX_SIZE then
      838:   91:            A.SIZE:= A.SIZE +1;
      838:   92:            A.ELEMENTS(A.SIZE).DATA := D;
      838:   93:            A.ELEMENTS(A.SIZE).ID:= ID;
        -:   94:         end if;
        -:   95:
        -:   96:      end if;
      838:   97:   end APPEND;
        -:   98:
        -:   99:   ---------------
        -:  100:   -- APPEND  TO FIRST  --
        -:  101:   ---------------
        -:  102:
        -:  103:--     procedure APPEND_TO_FIRST ( A: in out  LIST_PTR ; D: in DATA_TYPE; ID: in Natural)
        -:  104:--     is
        -:  105:--  --        size: Natural;
        -:  106:--     begin
        -:  107:--        A.SIZE:= A.SIZE +1;
        -:  108:--        if not FULL(A) then
        -:  109:--           for i in reverse 2 .. A.SIZE loop
        -:  110:--              A.ELEMENTS(i) :=  A.ELEMENTS(i-1);
        -:  111:--           end loop;
        -:  112:--           A.ELEMENTS(1).DATA := D;
        -:  113:--           A.ELEMENTS(1).ID:= ID;
        -:  114:--        end if;
        -:  115:--
        -:  116:--
        -:  117:--     end APPEND_TO_FIRST;
        -:  118:
        -:  119:
        -:  120:   ---------------
        -:  121:   -- DELETE    --
        -:  122:   ---------------
        -:  123:
        -:  124:--     procedure DELETE_ALL (A: in out LIST_PTR )
        -:  125:--     is
        -:  126:--     begin
        -:  127:--        -- Set size to 0
        -:  128:--        A.SIZE := 0;
        -:  129:--        A.HEAD := 1;
        -:  130:--
        -:  131:--     end DELETE_ALL;
        -:  132:
        -:  133:
        -:  134:   -----------------
        -:  135:   -- GET_ELEMENT --
        -:  136:   -----------------
        -:  137:
     6229:  138:   function GET_ELEMENT( A: LIST_PTR ;LOCATION: Natural )
        -:  139:                        return DATA_TYPE
        -:  140:   is
        -:  141:   begin
     6229:  142:      if  A.SIZE = 0 or LOCATION <= 0  or LOCATION >A.SIZE or LOCATION > A.MAX_SIZE then
        -:  143:
        -:  144:         -- If element is not in the list at this location
        2:  145:         return NO_FOUND;
        -:  146:      else
     6227:  147:         return A.ELEMENTS(LOCATION).DATA;
        -:  148:      end if;
        -:  149:
        -:  150:   end GET_ELEMENT;
        -:  151:
        -:  152:   ----------------------
        -:  153:   -- GET_ELEMENT_BY_ID--
        -:  154:   ----------------------
        -:  155:
     4499:  156:   function GET_ELEMENT_BY_ID( A: LIST_PTR ;ID: Natural )
        -:  157:                        return DATA_TYPE
        -:  158:   is
     4499:  159:      data: DATA_TYPE;
        -:  160:   begin
        -:  161:
        -:  162:
     4499:  163:      if  A.SIZE = 0 or ID <= 0  or ID >A.SIZE then
        -:  164:
        -:  165:         -- If element is not in the list at this location
      664:  166:         return NO_FOUND;
        -:  167:
        -:  168:      else
        -:  169:
     3835:  170:         for i in 1 .. A.SIZE loop
    38043:  171:            if i< A.MAX_SIZE then
    38043:  172:               if A.ELEMENTS(i).ID = ID then
     3835:  173:                  data:=A.ELEMENTS(i).DATA;
        -:  174:               end if;
        -:  175:            end if;
    38043:  176:         end loop;
     3835:  177:         return data;
        -:  178:
        -:  179:      end if;
        -:  180:
     4499:  181:   end GET_ELEMENT_BY_ID;
        -:  182:
        -:  183:
        -:  184:--     ----------
        -:  185:--     -- SWAP --
        -:  186:--     ----------
        -:  187:--
        -:  188:--     procedure SWAP( A: in out LIST_PTR; FIRST: Natural; SECOND: Natural)
        -:  189:--     is
        -:  190:--        TEMPA,TEMPB: DATA ;
        -:  191:--     begin
        -:  192:--        if A.SIZE = 0 or FIRST <=0 or SECOND >A.SIZE or FIRST >A.SIZE or SECOND <=0 then
        -:  193:--           -- If the index to find the element is out of bounds raise the exception
        -:  194:--           raise OUT_OF_BOUNDS;
        -:  195:--        end if;
        -:  196:--
        -:  197:--        if FIRST = SECOND then
        -:  198:--           -- If first is equal to seconde then there is no need to swap!
        -:  199:--           return;
        -:  200:--        end if;
        -:  201:--
        -:  202:--        -- Get the data at specified positions
        -:  203:--        TEMPA:= GET_ELEMENT_RECORD( A, FIRST);
        -:  204:--        TEMPB:= GET_ELEMENT_RECORD( A, SECOND);
        -:  205:--
        -:  206:--        -- Swap them
        -:  207:--        REPLACE( A, FIRST, TEMPB);
        -:  208:--        REPLACE( A, SECOND,TEMPA);
        -:  209:--
        -:  210:--     end SWAP;
        -:  211:
        -:  212:--
        -:  213:--     -------------
        -:  214:--     -- REPLACE --
        -:  215:--     -------------
        -:  216:--
        -:  217:--     procedure REPLACE (A: in out LIST_PTR; LOCATION: Natural; NEWVALUE: DATA )
        -:  218:--     is
        -:  219:--     begin
        -:  220:--        if  A.SIZE = 0 or LOCATION <= 0 or LOCATION > A.SIZE or LOCATION > MAX_SIZE then
        -:  221:--           -- If the index of the element don't exist raise exception
        -:  222:--           return;
        -:  223:--        else
        -:  224:--           A.ELEMENTS(LOCATION):= NEWVALUE;
        -:  225:--        end if;
        -:  226:--
        -:  227:--     end REPLACE;
        -:  228:
        -:  229:
        -:  230:   -------------
        -:  231:   -- REPLACE_BY_ID --
        -:  232:   -------------
        -:  233:
      268:  234:   procedure REPLACE_BY_ID (A: in out LIST_PTR; ID: Natural; NEWVALUE: DATA_TYPE )
        -:  235:   is
        -:  236:   begin
      268:  237:      if  A.SIZE > 0 or ID > 0 or ID <= A.SIZE then
      268:  238:         for i in 1 .. A.SIZE loop
      996:  239:            if i <A.MAX_SIZE then
      996:  240:               if A.ELEMENTS(i).ID = ID then
      268:  241:                  A.ELEMENTS(i).DATA := NEWVALUE;
      268:  242:                  return;
        -:  243:               end if;
        -:  244:            end if;
      728:  245:         end loop;
        -:  246:      end if;
        -:  247:
        -:  248:   end REPLACE_BY_ID;
        -:  249:
        -:  250:
      170:  251:   procedure Init (A : in out LIST_PTR) is
        -:  252:   begin
      170:  253:      A.Head := 1;
      170:  254:      A.Size := 0;
      170:  255:   end Init;
        -:  256:end LIST;
