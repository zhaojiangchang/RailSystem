        -:    0:Source:C:/Users/JackyChang/Desktop/RailSystem/src/List.adb
        -:    0:Programs:38
        -:    1:
        -:    2:-- The list is implemented using the CELL_PTR access type
        -:    3:-- of the CELL type. a Cell contatins the data of the user
        -:    4:-- and a link to the next CELL (which is null if is the last
        -:    5:-- element of the list).
        -:    6:with ada.Text_IO;
        -:    7:use ada.Text_IO;
        -:    8:
        -:    9:package body LIST is
        -:   10:
        -:   11:   -----------------------
        -:   12:   -- Local Subprograms --
        -:   13:   -----------------------
        -:   14:   ---------------
        -:   15:   -- CONTAINS --
        -:   16:   ---------------
      200:   17:   function CONTAINS (A: LIST_PTR; D: DATA_TYPE) return Boolean
        -:   18:   is
        -:   19:      size: Natural;
        -:   20:   begin
      200:   21:      size:= A.SIZE;
        -:   22:
      200:   23:      for i in 1 .. size loop
       80:   24:         if A.ELEMENTS(i).DATA = D then
    #####:   25:            return True;
        -:   26:         end if;
       80:   27:      end loop;
      200:   28:      return False;
        -:   29:   end CONTAINS;
        -:   30:
        -:   31:
        -:   32:
        -:   33:
        -:   34:   ---------------
        -:   35:   -- GET_FIRST --
        -:   36:   ---------------
        -:   37:
    #####:   38:   function GET_FIRST( A: LIST_PTR )
        -:   39:                      return DATA_TYPE
        -:   40:   is
        -:   41:   begin
    #####:   42:      return A.ELEMENTS(1).DATA;
        -:   43:   end GET_FIRST;
        -:   44:
        -:   45:
        -:   46:   ---------------
        -:   47:   -- GET_LAST  --
        -:   48:   ---------------
        -:   49:
    #####:   50:   function GET_LAST ( A: LIST_PTR )
        -:   51:                      return DATA_TYPE
        -:   52:   is
        -:   53:   begin
    #####:   54:      return A.ELEMENTS(A.SIZE).DATA;
        -:   55:   end GET_LAST;
        -:   56:
        -:   57:
        -:   58:   ---------------
        -:   59:   -- GET_SIZE  --
        -:   60:   ---------------
        -:   61:
     1294:   62:   function GET_SIZE ( A: LIST_PTR )
        -:   63:                      return Natural
        -:   64:   is
        -:   65:   begin
     1294:   66:      return A.SIZE;
        -:   67:   end GET_SIZE;
        -:   68:
        -:   69:   ---------------
        -:   70:   -- FULL  --
        -:   71:   ---------------
      539:   72:   function FULL ( A : in LIST_PTR) return Boolean is
        -:   73:   begin
      539:   74:      return A.SIZE = A.MAX_SIZE;
        -:   75:   end FULL;
        -:   76:   ---------------
        -:   77:   -- APPEND    --
        -:   78:   ---------------
        -:   79:
      539:   80:   procedure APPEND ( A: in out LIST_PTR; D: in DATA_TYPE; ID: in Natural)
        -:   81:   is
        -:   82:   begin
        -:   83:
        -:   84:      -- create a new cell to store the new element
      539:   85:      if not FULL(A) then
      539:   86:         A.SIZE:= A.SIZE +1;
      539:   87:         A.ELEMENTS(A.SIZE).DATA := D;
      539:   88:         A.ELEMENTS(A.SIZE).ID:= ID;
        -:   89:      end if;
      539:   90:   end APPEND;
        -:   91:
        -:   92:   ---------------
        -:   93:   -- APPEND  TO FIRST  --
        -:   94:   ---------------
        -:   95:
        -:   96:--     procedure APPEND_TO_FIRST ( A: in out  LIST_PTR ; D: in DATA_TYPE; ID: in Natural)
        -:   97:--     is
        -:   98:--  --        size: Natural;
        -:   99:--     begin
        -:  100:--        A.SIZE:= A.SIZE +1;
        -:  101:--        if not FULL(A) then
        -:  102:--           for i in reverse 2 .. A.SIZE loop
        -:  103:--              A.ELEMENTS(i) :=  A.ELEMENTS(i-1);
        -:  104:--           end loop;
        -:  105:--           A.ELEMENTS(1).DATA := D;
        -:  106:--           A.ELEMENTS(1).ID:= ID;
        -:  107:--        end if;
        -:  108:--
        -:  109:--
        -:  110:--     end APPEND_TO_FIRST;
        -:  111:
        -:  112:
        -:  113:   ---------------
        -:  114:   -- DELETE    --
        -:  115:   ---------------
        -:  116:
       72:  117:   procedure DELETE_ALL (A: in out LIST_PTR )
        -:  118:   is
        -:  119:   begin
        -:  120:      -- Set size to 0
       72:  121:      A.SIZE := 0;
       72:  122:      A.HEAD := 1;
        -:  123:
       72:  124:   end DELETE_ALL;
        -:  125:
        -:  126:
        -:  127:   -----------------
        -:  128:   -- GET_ELEMENT --
        -:  129:   -----------------
        -:  130:
      559:  131:   function GET_ELEMENT( A: LIST_PTR ;LOCATION: Natural )
        -:  132:                        return DATA_TYPE
        -:  133:   is
        -:  134:   begin
        -:  135:
        -:  136:
      559:  137:      if  A.SIZE = 0 or LOCATION <= 0  or LOCATION >A.SIZE then
        -:  138:
        -:  139:         -- If element is not in the list at this location
       12:  140:         return NO_FOUND;
        -:  141:
        -:  142:      else
      547:  143:         return A.ELEMENTS(LOCATION).DATA;
        -:  144:      end if;
        -:  145:
        -:  146:   end GET_ELEMENT;
        -:  147:
        -:  148:   ------------------------
        -:  149:   -- GET_ELEMENT_Record --
        -:  150:   ------------------------
        -:  151:
    #####:  152:   function GET_ELEMENT_RECORD( A: LIST_PTR ;LOCATION: Natural )
        -:  153:                        return DATA
        -:  154:   is
    #####:  155:      D: DATA;
        -:  156:   begin
    #####:  157:      D.ID:=0;
        -:  158:
        -:  159:
    #####:  160:      if  A.SIZE = 0 or LOCATION <= 0  or LOCATION >A.SIZE then
        -:  161:
        -:  162:         -- If element is not in the list at this location
    #####:  163:         return D;
        -:  164:
        -:  165:      else
    #####:  166:         return A.ELEMENTS(LOCATION);
        -:  167:      end if;
        -:  168:
    #####:  169:   end GET_ELEMENT_RECORD;
        -:  170:
        -:  171:   ----------------------
        -:  172:   -- GET_ELEMENT_BY_ID--
        -:  173:   ----------------------
        -:  174:
     4960:  175:   function GET_ELEMENT_BY_ID( A: LIST_PTR ;ID: Natural )
        -:  176:                        return DATA_TYPE
        -:  177:   is
        -:  178:   begin
        -:  179:
        -:  180:
     4960:  181:      if  A.SIZE = 0 or ID <= 0  or ID >A.SIZE then
        -:  182:
        -:  183:         -- If element is not in the list at this location
      258:  184:         return NO_FOUND;
        -:  185:
        -:  186:      else
        -:  187:
     4702:  188:         for i in 1 .. A.SIZE loop
    22556:  189:            if A.ELEMENTS(i).ID = ID then
     4702:  190:               return A.ELEMENTS(i).DATA;
        -:  191:            end if;
    17854:  192:         end loop;
    #####:  193:         return NO_FOUND;
        -:  194:      end if;
        -:  195:
        -:  196:   end GET_ELEMENT_BY_ID;
        -:  197:
        -:  198:
        -:  199:--     ----------
        -:  200:--     -- SWAP --
        -:  201:--     ----------
        -:  202:--
        -:  203:--     procedure SWAP( A: in out LIST_PTR; FIRST: Natural; SECOND: Natural)
        -:  204:--     is
        -:  205:--        TEMPA,TEMPB: DATA ;
        -:  206:--     begin
        -:  207:--        if A.SIZE = 0 or FIRST <=0 or SECOND >A.SIZE or FIRST >A.SIZE or SECOND <=0 then
        -:  208:--           -- If the index to find the element is out of bounds raise the exception
        -:  209:--           raise OUT_OF_BOUNDS;
        -:  210:--        end if;
        -:  211:--
        -:  212:--        if FIRST = SECOND then
        -:  213:--           -- If first is equal to seconde then there is no need to swap!
        -:  214:--           return;
        -:  215:--        end if;
        -:  216:--
        -:  217:--        -- Get the data at specified positions
        -:  218:--        TEMPA:= GET_ELEMENT_RECORD( A, FIRST);
        -:  219:--        TEMPB:= GET_ELEMENT_RECORD( A, SECOND);
        -:  220:--
        -:  221:--        -- Swap them
        -:  222:--        REPLACE( A, FIRST, TEMPB);
        -:  223:--        REPLACE( A, SECOND,TEMPA);
        -:  224:--
        -:  225:--     end SWAP;
        -:  226:
        -:  227:--
        -:  228:--     -------------
        -:  229:--     -- REPLACE --
        -:  230:--     -------------
        -:  231:--
    #####:  232:   procedure REPLACE (A: in out LIST_PTR; LOCATION: Natural; NEWVALUE: DATA )
        -:  233:   is
        -:  234:   begin
    #####:  235:      if  A.SIZE = 0 or LOCATION <= 0 or LOCATION > A.SIZE then
        -:  236:         -- If the index of the element don't exist raise exception
    #####:  237:         raise OUT_OF_BOUNDS;
        -:  238:      else
    #####:  239:         A.ELEMENTS(LOCATION):= NEWVALUE;
        -:  240:      end if;
        -:  241:
    #####:  242:   end REPLACE;
        -:  243:
        -:  244:
        -:  245:   -------------
        -:  246:   -- REPLACE_BY_ID --
        -:  247:   -------------
        -:  248:
      385:  249:   procedure REPLACE_BY_ID (A: in out LIST_PTR; ID: Natural; NEWVALUE: DATA_TYPE )
        -:  250:   is
        -:  251:   begin
      385:  252:      if  A.SIZE = 0 or ID <= 0 or ID > A.SIZE then
        -:  253:         -- If the index of the element don't exist raise exception
    #####:  254:         raise OUT_OF_BOUNDS;
        -:  255:      else
      385:  256:         for i in 1 .. A.SIZE loop
     1573:  257:            if A.ELEMENTS(i).ID = ID then
      385:  258:               A.ELEMENTS(i).DATA := NEWVALUE;
      770:  259:               return;
        -:  260:            end if;
     1188:  261:         end loop;
    #####:  262:         raise OUT_OF_BOUNDS;
        -:  263:      end if;
        -:  264:
        -:  265:   end REPLACE_BY_ID;
        -:  266:
        -:  267:
      335:  268:   procedure Init (A : in out LIST_PTR) is
        -:  269:   begin
      335:  270:      A.Head := 1;
      335:  271:      A.Size := 0;
      335:  272:      for i in 1.. A.SIZE loop
    #####:  273:         A.ELEMENTS(i).ID:=0;
    #####:  274:      end loop;
        -:  275:
      335:  276:   end Init;
        -:  277:end LIST;
