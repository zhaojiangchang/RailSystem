        -:    0:Source:C:/Users/JackyChang/Desktop/RailSystem/src/_test/scenarios/railsystems-test.adb
        -:    0:Programs:41
        -:    1:with Ada.Text_IO; use Ada.Text_IO;
        -:    2:with AUnit.Assertions; use AUnit.Assertions;
        -:    3:with sPrint;
        2:    4:package body RailSystems.Test is
        -:    5:
        2:    6:   rail_system: RailSystem;
        -:    7:
        -:    8:   use all type TYPES.MAX_SIZE;
        -:    9:
        2:   10:   procedure Set_Up_Case (T: in out TC) is
        -:   11:      pragma Unreferenced (T);
        -:   12:
        -:   13:   begin
        2:   14:      New_Line;
        2:   15:      Put_Line ("Set up case ..");
        -:   16:
        2:   17:   end Set_Up_Case;
        -:   18:
        -:   19:
       10:   20:   procedure Set_Up (T : in out TC) is
        -:   21:   begin
       10:   22:      New_Line;
       10:   23:      Put_Line("Set Up ..");
       10:   24:      if LIST_STATIONS.GET_SIZE(rail_system.All_Stations) >0 then
    #####:   25:         LIST_STATIONS.DELETE_ALL(rail_system.All_Stations);
        -:   26:      end if;
       10:   27:      if  LIST_TRAINS.GET_SIZE(rail_system.All_Trains) >0 then
    #####:   28:         LIST_TRAINS.DELETE_ALL(rail_system.All_Trains);
        -:   29:      end if;
       10:   30:      if Stations.LIST_TRACKS.GET_SIZE(rail_system.All_Tracks) >0 then
    #####:   31:         Stations.LIST_TRACKS.DELETE_ALL(rail_system.All_Tracks);
        -:   32:      end if;
       10:   33:      Put_Line ("finish Set up ..");
        -:   34:
        -:   35:
       10:   36:   end;
        -:   37:
       10:   38:   procedure Tear_Down (T : in out TC) is
        -:   39:   begin
       10:   40:      Put_Line("Tear Down ...");
       10:   41:      if LIST_STATIONS.GET_SIZE(rail_system.All_Stations) >0 then
       10:   42:         LIST_STATIONS.DELETE_ALL(rail_system.All_Stations);
        -:   43:      end if;
       10:   44:      if  LIST_TRAINS.GET_SIZE(rail_system.All_Trains) >0 then
       10:   45:         LIST_TRAINS.DELETE_ALL(rail_system.All_Trains);
        -:   46:      end if;
       10:   47:      if Stations.LIST_TRACKS.GET_SIZE(rail_system.All_Tracks) >0 then
       10:   48:         Stations.LIST_TRACKS.DELETE_ALL(rail_system.All_Tracks);
        -:   49:      end if;
        -:   50:
        -:   51:
        -:   52:
       10:   53:   end;
        -:   54:
        2:   55:   procedure Tear_Down_Case (T : in out TC) is
        -:   56:   begin
        2:   57:      Put_Line ("Tear Down Case ..");
        2:   58:      if LIST_STATIONS.GET_SIZE(rail_system.All_Stations) >0 then
    #####:   59:         LIST_STATIONS.DELETE_ALL(rail_system.All_Stations);
        -:   60:      end if;
        2:   61:      if  LIST_TRAINS.GET_SIZE(rail_system.All_Trains) >0 then
    #####:   62:         LIST_TRAINS.DELETE_ALL(rail_system.All_Trains);
        -:   63:      end if;
        2:   64:      if Stations.LIST_TRACKS.GET_SIZE(rail_system.All_Tracks) >0 then
    #####:   65:         Stations.LIST_TRACKS.DELETE_ALL(rail_system.All_Tracks);
        -:   66:      end if;
        -:   67:
        2:   68:   end;
        -:   69:
        -:   70:   -- ===========================================================
        -:   71:   --                 TEST CASES/SCENARIOS
        -:   72:   -- ===========================================================
        -:   73:
        -:   74:
        2:   75:   procedure Test_AddTrain (CWTC : in out AUnit.Test_Cases.Test_Case'Class) is
        -:   76:
        -:   77:
        -:   78:      currentLocaiton: TYPES.Location_Type;
        -:   79:      intArray: TYPES.trackIDsArray;
        -:   80:   begin
        2:   81:      Put_Line("");
        2:   82:      Put_Line("Test add train");
        2:   83:      currentLocaiton :=(TYPES.L_Track=>1,TYPES.L_Station=>2,TYPES.L_Non=>0);
        -:   84:      --TODO: current location should be the record not integer
        2:   85:      addTrain(rail_system, 1,currentLocaiton(TYPES.L_Non));
        2:   86:      addTrain(rail_system, 2,currentLocaiton(TYPES.L_Station));
        2:   87:      addTrain(rail_system, 3,currentLocaiton(TYPES.L_Track));
        -:   88:
        2:   89:      Put_Line("total trains size: "& RailSystems.LIST_TRAINS.GET_SIZE(rail_system.All_Trains)'Image);
        -:   90:
        -:   91:      --add tracks
        2:   92:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.UpperHutt);
        2:   93:      addTrack(rail_system,  2, TYPES.Wellington, TYPES.Johnsonville);
        2:   94:      addTrack(rail_system,  3, TYPES.Wellington, TYPES.LowerHutt);
        2:   95:      Put_Line("total tracks size: "&Stations.LIST_TRACKS.GET_SIZE(rail_system.All_Tracks)'Image);
        -:   96:
        2:   97:      addStation(rail_system, 1,TYPES.Wellington);
        2:   98:      addStation(rail_system, 2,TYPES.Johnsonville);
        2:   99:      addStation(rail_system, 3,TYPES.UpperHutt);
        2:  100:      Put_Line("total stations size: "& RailSystems.LIST_STATIONS.GET_SIZE(rail_system.All_Stations)'Image);
        -:  101:
        2:  102:      intArray:=(1=>1,others =>0);
        -:  103:
        2:  104:      addIncomingOutgoingTracksForStation(rail_system, 1, intArray, "Incoming");
        2:  105:      addIncomingOutgoingTracksForStation(rail_system, 1, intArray, "Outgoing");
        -:  106:      --
        2:  107:      intArray:=(1=>2,others =>0);
        2:  108:      addIncomingOutgoingTracksForStation(rail_system, 2, intArray, "Incoming");
        2:  109:      addIncomingOutgoingTracksForStation(rail_system, 2, intArray, "Outgoing");
        -:  110:
        2:  111:      intArray:=(1=>1, 2=>2, 3=>3,others =>0);
        2:  112:      addIncomingOutgoingTracksForStation(rail_system, 3, intArray, "Incoming");
        2:  113:      addIncomingOutgoingTracksForStation(rail_system, 3, intArray, "Outgoing");
        -:  114:
        -:  115:
        -:  116:
        -:  117:      --     intArray:=(1=>3,others =>0);
        -:  118:      --     RailSystems.addIncomingTracksForStation(rail_system, 3, intArray);
        -:  119:      --     RailSystems.addOutgoingTracksForStation(rail_system, 3, intArray);
        -:  120:      --     intArray:=(1=>2,others =>0);
        -:  121:      --     RailSystems.addIncomingTracksForStation(rail_system, 3, intArray);
        -:  122:      --     RailSystems.addOutgoingTracksForStation(rail_system, 3, intArray);
        -:  123:
        2:  124:      Put_Line("station 1 incoming tracks size: "&  Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Incoming)'Image);
        2:  125:      Put_Line("station 2 incoming tracks size: "&  Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,2).Incoming)'Image);
        2:  126:      Put_Line("station 3 incoming tracks size: "&  Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,3).Incoming)'Image);
        2:  127:      Put_Line("station 1 outgoing tracks size: "&  Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Outgoing)'Image);
        2:  128:      Put_Line("station 2 outgoing tracks size: "&  Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,2).Outgoing)'Image);
        2:  129:      Put_Line("station 3 outgoing tracks size: "&  Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,3).Outgoing)'Image);
        -:  130:
        -:  131:
        2:  132:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Incoming) = 1),
        -:  133:              Message => "station 1 should income tracks = 1");
        -:  134:
        2:  135:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,2).Incoming) = 1),
        -:  136:              Message => "station 2 should income tracks = 1");
        -:  137:
        2:  138:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,3).Incoming) = 3),
        -:  139:              Message => "station 3 should income tracks = 3");
        2:  140:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Outgoing) = 1),
        -:  141:              Message => "station 1 should outgoing tracks = 1");
        -:  142:
        2:  143:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,2).Outgoing) = 1),
        -:  144:              Message => "station 2 should outgoing tracks = 1");
        -:  145:
        2:  146:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,3).Outgoing) = 3),
        -:  147:              Message => "station 3 should outgoing tracks = 3");
        2:  148:   end Test_AddTrain;
        -:  149:
        2:  150:   procedure Test_AlreadyAddTrackException_Incoming (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  151:      procedure Test_Raising_Exception is
        -:  152:         currentLocaiton: TYPES.Location_Type;
        -:  153:         intArray: TYPES.trackIDsArray;
        -:  154:      begin
        2:  155:         currentLocaiton :=(TYPES.L_Track=>1,TYPES.L_Station=>2,TYPES.L_Non=>0);
        -:  156:         --TODO: current location should be the record not integer
        2:  157:         addTrain(rail_system, 1,currentLocaiton(TYPES.L_Non));
        2:  158:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.UpperHutt);
        2:  159:         addStation(rail_system, 1,TYPES.Wellington);
        -:  160:
        2:  161:         intArray:=(1=>1,others =>0);
        -:  162:
        2:  163:         addIncomingOutgoingTracksForStation(rail_system, 1, intArray, "Incoming");
        2:  164:         addIncomingOutgoingTracksForStation(rail_system, 1, intArray, "Outgoing");
        2:  165:         addIncomingOutgoingTracksForStation(rail_system, 1, intArray, "Incoming");
        -:  166:
        -:  167:
    #####:  168:      end;
        -:  169:   begin
        2:  170:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  171:                        Message =>"can not add same track (station incoming tracks)");
        2:  172:   end Test_AlreadyAddTrackException_Incoming;
        -:  173:
        -:  174:
        2:  175:    procedure Test_AlreadyAddTrackException_Outgoing (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  176:      procedure Test_Raising_Exception is
        -:  177:         currentLocaiton: TYPES.Location_Type;
        -:  178:         intArray: TYPES.trackIDsArray;
        -:  179:      begin
        2:  180:         currentLocaiton :=(TYPES.L_Track=>1,TYPES.L_Station=>2,TYPES.L_Non=>0);
        -:  181:         --TODO: current location should be the record not integer
        2:  182:         addTrain(rail_system, 1,currentLocaiton(TYPES.L_Non));
        2:  183:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.UpperHutt);
        2:  184:         addStation(rail_system, 1,TYPES.Wellington);
        -:  185:
        2:  186:         intArray:=(1=>1,others =>0);
        -:  187:
        2:  188:         addIncomingOutgoingTracksForStation(rail_system, 1, intArray, "Incoming");
        2:  189:         addIncomingOutgoingTracksForStation(rail_system, 1, intArray, "Outgoing");
        2:  190:         addIncomingOutgoingTracksForStation(rail_system, 1, intArray, "Outgoing");
        -:  191:
        -:  192:
    #####:  193:      end;
        -:  194:   begin
        2:  195:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  196:                        Message =>"can not add same track (station incoming tracks)");
        2:  197:   end Test_AlreadyAddTrackException_Outgoing;
        -:  198:
        -:  199:
        2:  200:   procedure Test_NotFindTrackIdException (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  201:      procedure Test_Raising_Exception is
        -:  202:         currentLocaiton: TYPES.Location_Type;
        -:  203:         intArray: TYPES.trackIDsArray;
        -:  204:      begin
        2:  205:         currentLocaiton :=(TYPES.L_Track=>1,TYPES.L_Station=>2,TYPES.L_Non=>0);
        -:  206:         --TODO: current location should be the record not integer
        2:  207:         addTrain(rail_system, 1,currentLocaiton(TYPES.L_Non));
        2:  208:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.UpperHutt);
        2:  209:         addStation(rail_system, 1,TYPES.Wellington);
        -:  210:
        2:  211:         intArray:=(1=>2,others =>0);
        -:  212:
        2:  213:         addIncomingOutgoingTracksForStation(rail_system, 1, intArray, "Incoming");
    #####:  214:      end;
        -:  215:   begin
        2:  216:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  217:                        Message =>"track id not exist (station incoming tracks)");
        2:  218:   end Test_NotFindTrackIdException;
        -:  219:
        2:  220:   procedure Test_StationIDNotExistException (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  221:      procedure Test_Raising_Exception is
        -:  222:         currentLocaiton: TYPES.Location_Type;
        -:  223:         intArray: TYPES.trackIDsArray;
        -:  224:      begin
        2:  225:         currentLocaiton :=(TYPES.L_Track=>1,TYPES.L_Station=>2,TYPES.L_Non=>0);
        -:  226:         --TODO: current location should be the record not integer
        2:  227:         addTrain(rail_system, 1,currentLocaiton(TYPES.L_Non));
        2:  228:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.UpperHutt);
        2:  229:         addStation(rail_system, 1,TYPES.Wellington);
        -:  230:
        2:  231:         intArray:=(1=>2,others =>0);
        -:  232:
        2:  233:         addIncomingOutgoingTracksForStation(rail_system, 2, intArray, "Incoming");
    #####:  234:      end;
        -:  235:   begin
        2:  236:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  237:                        Message =>"station id not exist (station incoming tracks)");
        2:  238:   end Test_StationIDNotExistException;
        -:  239:   --==========================================================
        -:  240:   --               REGISTRATION/NAMING
        -:  241:   --==========================================================
        -:  242:   --
        2:  243:   procedure Register_Tests (T: in out TC) is
        -:  244:      use AUnit.Test_Cases.Registration;
        -:  245:   begin
        2:  246:      Register_Routine (Test => T,
        -:  247:                        Routine => Test_AddTrain'Access,
        -:  248:                        Name => "Test_AddTrain");
        2:  249:      Register_Routine (Test => T,
        -:  250:                        Routine => Test_AlreadyAddTrackException_Incoming'Access,
        -:  251:                        Name => "Test_AlreadyAddTrackException_Incoming");
        2:  252:       Register_Routine (Test => T,
        -:  253:                        Routine => Test_AlreadyAddTrackException_Outgoing'Access,
        -:  254:                        Name => "Test_AlreadyAddTrackException_Outgoing");
        2:  255:      Register_Routine (Test => T,
        -:  256:                        Routine => Test_NotFindTrackIdException'Access,
        -:  257:                        Name => "Test_NotFindTrackIdException");
        2:  258:      Register_Routine (Test => T,
        -:  259:                        Routine => Test_StationIDNotExistException'Access,
        -:  260:                        Name => "Test_StationIDNotExistException");
        2:  261:   end Register_Tests;
        -:  262:
       10:  263:   function Name (T: TC) return AUnit.Message_String is
        -:  264:      pragma Unreferenced (T);
        -:  265:   begin
       10:  266:      return AUnit.Format ("Tests: Standard Tests");
        -:  267:   end Name;
        -:  268:
        2:  269:end RailSystems.Test;
