        -:    0:Source:C:/Users/JackyChang/Desktop/tutorial/RailSystem/src/_test/scenarios/railsystems-test.adb
        -:    0:Programs:38
        -:    1:with Ada.Text_IO; use Ada.Text_IO;
        -:    2:with AUnit.Assertions; use AUnit.Assertions;
        -:    3:with TYPES;
        -:    4:with sPrint;
        2:    5:package body RailSystems.Test is
        -:    6:
        2:    7:   rail_system: RailSystem;
        -:    8:   use all type TYPES.Station_Locations;
        -:    9:   use all type TYPES.MAX_SIZE;
        -:   10:   use all type TYPES.Train_State;
        2:   11:   TrainA: Trains.Train;
        2:   12:   TrainB: Trains.Train;
        2:   13:   TrainC: Trains.Train;
        2:   14:   procedure Set_Up_Case (T: in out TC) is
        -:   15:      pragma Unreferenced (T);
        2:   16:      TrainA: Trains.Train;
        2:   17:      TrainB: Trains.Train;
        2:   18:      TrainC: Trains.Train;
        -:   19:   begin
        2:   20:      New_Line;
        2:   21:      Put_Line ("Set up case ..");
        -:   22:
        2:   23:   end Set_Up_Case;
        -:   24:
        -:   25:
       70:   26:   procedure Set_Up (T : in out TC) is
       70:   27:      TrainA: Trains.Train;
       70:   28:      TrainB: Trains.Train;
       70:   29:      TrainC: Trains.Train;
        -:   30:   begin
       70:   31:      New_Line;
       70:   32:      Put_Line("Set Up ..");
       70:   33:      Put_Line ("finish Set up ..");
        -:   34:
       70:   35:   end;
        -:   36:
       70:   37:   procedure Tear_Down (T : in out TC) is
       70:   38:      TrainA: Trains.Train;
       70:   39:      TrainB: Trains.Train;
       70:   40:      TrainC: Trains.Train;
        -:   41:   begin
       70:   42:      Put_Line("Tear Down ...");
        -:   43:
       70:   44:   end;
        -:   45:
        2:   46:   procedure Tear_Down_Case (T : in out TC) is
        2:   47:      TrainA: Trains.Train;
        2:   48:      TrainB: Trains.Train;
        2:   49:      TrainC: Trains.Train;
        -:   50:   begin
        2:   51:      Put_Line ("Tear Down Case ..");
        -:   52:
        2:   53:   end;
        -:   54:
        -:   55:   -- ===========================================================
        -:   56:   --                 TEST CASES/SCENARIOS
        -:   57:   -- ===========================================================
        -:   58:
        2:   59:   procedure Test_dfs_station_reachability_by_train (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:   60:   is
        2:   61:      TrainA: Trains.Train;
        -:   62:   begin
        2:   63:      Init(r_system => rail_system);
        2:   64:      Put_Line("");
        2:   65:      Put_Line("Test_dfs_station_reachability_by_train");
        -:   66:
        2:   67:      addTrain(rail_system, 1);
        -:   68:      --           setTrainLocation(rail_system, trainB, "None");
        2:   69:      TrainA := getTrainById(rail_system,1);
        -:   70:
        2:   71:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:   72:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:   73:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -:   74:
        2:   75:      addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:   76:      addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:   77:      addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:   78:      addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:   79:
        2:   80:      addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:   81:      addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:   82:      addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:   83:
        2:   84:      addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:   85:      addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:   86:      addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:   87:      addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        2:   88:      addTrack(rail_system,  15, TYPES.Johnsonville, TYPES.UpperHutt, TYPES.Johnsonville, TYPES.UpperHutt);
        2:   89:      addTrack(rail_system,  16, TYPES.UpperHutt, TYPES.Johnsonville, TYPES.UpperHutt, TYPES.Johnsonville);
        -:   90:
        2:   91:      addStation(rail_system, 1,TYPES.Wellington);
        2:   92:      addStation(rail_system, 2,TYPES.Johnsonville);
        2:   93:      addStation(rail_system, 3,TYPES.UpperHutt);
        2:   94:      addStation(rail_system, 4,TYPES.LowerHutt);
        2:   95:      addStation(rail_system, 5,TYPES.Petone);
        2:   96:      addStation(rail_system, 6,TYPES.CroftonDowns);
        2:   97:      addStation(rail_system, 7,TYPES.Ngaio);
        2:   98:      addStation(rail_system, 8,TYPES.Khandallah);
        2:   99:      addIncomingOutgoingTracksForEachStation(rail_system);
        -:  100:
        2:  101:      prepareTrain(rail_system, trainA, Types.Wellington, Types.Johnsonville, TYPES.S8);
        2:  102:      dfs_station_reachability_by_train(rail_system, trainA);
        2:  103:      Assert (Condition => (trainA.isReachable) = True,
        -:  104:              Message => "Test_dfs_station_reachability_by_train: reachable from wellington to johnsonvile");
        2:  105:   end Test_dfs_station_reachability_by_train;
        -:  106:
        2:  107:   procedure Test_dfs_station_reachability_by_train_station_trainid_equls_zero_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  108:      procedure Test_Raising_Exception is
        2:  109:         TrainA: Trains.Train;
        -:  110:      begin
        2:  111:           Init(r_system => rail_system);
        2:  112:      Put_Line("");
        2:  113:      Put_Line("Test_dfs_station_reachability_by_train_station_trainid_equls_zero_Exception");
        -:  114:
        2:  115:      addTrain(rail_system, 1);
        -:  116:      --           setTrainLocation(rail_system, trainB, "None");
        2:  117:      TrainA := getTrainById(rail_system,1);
        -:  118:
        -:  119:
        2:  120:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:  121:      addTrack(rail_system,  2, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:  122:      addTrack(rail_system,  3, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:  123:      addTrack(rail_system,  4, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:  124:
        2:  125:      addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:  126:      addTrack(rail_system,  6, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:  127:      addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:  128:      addTrack(rail_system,  8, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -:  129:
        -:  130:
        2:  131:      addStation(rail_system, 1,TYPES.Wellington);
        2:  132:      addStation(rail_system, 2,TYPES.Johnsonville);
        2:  133:      addStation(rail_system, 3,TYPES.CroftonDowns);
        2:  134:      addStation(rail_system, 4,TYPES.Ngaio);
        2:  135:      addStation(rail_system, 5,TYPES.Khandallah);
        2:  136:      addIncomingOutgoingTracksForEachStation(rail_system);
        -:  137:
        2:  138:         prepareTrain(rail_system, trainA, Types.Wellington, Types.Johnsonville, TYPES.S8);
        2:  139:         TrainA.Location.Station.Location:= TYPES.No;
        2:  140:         replaceStation(r_system => rail_system,
        2:  141:                        station  => getStationByName(stations_list   => rail_system.All_Stations,
        -:  142:                                                     stationLocation => trainA.Location.Station.Location));
    #####:  143:         dfs_station_reachability_by_train(rail_system, trainA);
    #####:  144:      end;
        -:  145:   begin
        2:  146:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  147:                        Message =>"Test_dfs_station_reachability_by_train_station_trainid_equls_zero_Exception: train.location.station.trainId = 0");
        2:  148:   end Test_dfs_station_reachability_by_train_station_trainid_equls_zero_Exception;
        -:  149:
        2:  150:   procedure Test_dfs_station_reachability_by_train_base_location_No_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  151:      procedure Test_Raising_Exception is
        2:  152:         TrainA: Trains.Train;
        -:  153:      begin
        2:  154:           Init(r_system => rail_system);
        2:  155:      Put_Line("");
        2:  156:      Put_Line("Test_dfs_station_reachability_by_train_base_location_No_Exception");
        -:  157:
        2:  158:      addTrain(rail_system, 1);
        -:  159:      --           setTrainLocation(rail_system, trainB, "None");
        2:  160:      TrainA := getTrainById(rail_system,1);
        -:  161:
        -:  162:
        2:  163:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:  164:      addTrack(rail_system,  2, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:  165:      addTrack(rail_system,  3, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:  166:      addTrack(rail_system,  4, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:  167:
        2:  168:      addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:  169:      addTrack(rail_system,  6, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:  170:      addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:  171:      addTrack(rail_system,  8, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -:  172:
        -:  173:
        2:  174:      addStation(rail_system, 1,TYPES.Wellington);
        2:  175:      addStation(rail_system, 2,TYPES.Johnsonville);
        2:  176:      addStation(rail_system, 3,TYPES.CroftonDowns);
        2:  177:      addStation(rail_system, 4,TYPES.Ngaio);
        2:  178:      addStation(rail_system, 5,TYPES.Khandallah);
        2:  179:      addIncomingOutgoingTracksForEachStation(rail_system);
        -:  180:
        2:  181:         prepareTrain(rail_system, trainA, Types.Wellington, Types.Johnsonville, TYPES.S8);
        2:  182:         TrainA.Location.Station.TrainID:= 0;
        2:  183:         replaceTrain(r_system => rail_system,
        -:  184:                      train    => trainA);
        2:  185:         dfs_station_reachability_by_train(rail_system, trainA);
    #####:  186:      end;
        -:  187:   begin
        2:  188:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  189:                        Message =>"Test_dfs_station_reachability_by_train_base_location_No_Exception: train.location.station.trainId = 0");
        2:  190:   end Test_dfs_station_reachability_by_train_base_location_No_Exception;
        -:  191:
        2:  192:   procedure Test_dfs_station_reachability_by_stations (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  193:   is
        2:  194:      TrainA: Trains.Train;
        -:  195:   begin
        2:  196:      Init(r_system => rail_system);
        2:  197:      Put_Line("");
        2:  198:      Put_Line("Test_dfs_station_reachability_by_stations");
        -:  199:
        2:  200:      addTrain(rail_system, 1);
        -:  201:      --           setTrainLocation(rail_system, trainB, "None");
        2:  202:      TrainA := getTrainById(rail_system,1);
        -:  203:
        2:  204:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  205:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  206:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -:  207:
        2:  208:      addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:  209:      addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:  210:      addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:  211:      addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:  212:
        2:  213:      addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  214:      addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  215:      addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  216:
        2:  217:      addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:  218:      addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:  219:      addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:  220:      addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        2:  221:      addTrack(rail_system,  15, TYPES.Johnsonville, TYPES.UpperHutt, TYPES.Johnsonville, TYPES.UpperHutt);
        2:  222:      addTrack(rail_system,  16, TYPES.UpperHutt, TYPES.Johnsonville, TYPES.UpperHutt, TYPES.Johnsonville);
        -:  223:
        2:  224:      addStation(rail_system, 1,TYPES.Wellington);
        2:  225:      addStation(rail_system, 2,TYPES.Johnsonville);
        2:  226:      addStation(rail_system, 3,TYPES.UpperHutt);
        2:  227:      addStation(rail_system, 4,TYPES.LowerHutt);
        2:  228:      addStation(rail_system, 5,TYPES.Petone);
        2:  229:      addStation(rail_system, 6,TYPES.CroftonDowns);
        2:  230:      addStation(rail_system, 7,TYPES.Ngaio);
        2:  231:      addStation(rail_system, 8,TYPES.Khandallah);
        2:  232:      addIncomingOutgoingTracksForEachStation(rail_system);
        2:  233:      dfs_station_reachability_by_stations(rail_system, TYPES.Wellington, TYPES.Johnsonville);
        2:  234:      Assert (Condition => (getStationByName(stations_list   => rail_system.All_Stations,
        -:  235:                                             stationLocation => TYPES.Johnsonville).isReachable) = True,
        -:  236:              Message => "Test_dfs_station_reachability_by_stations: reachable from wellington to johnsonvile");
        2:  237:       dfs_station_reachability_by_stations(rail_system, TYPES.Wellington, TYPES.UpperHutt);
        2:  238:      Assert (Condition => (getStationByName(stations_list   => rail_system.All_Stations,
        -:  239:                                             stationLocation => TYPES.UpperHutt).isReachable) = True,
        -:  240:              Message => "Test_dfs_station_reachability_by_stations: reachable from wellington to UpperHutt");
        2:  241:       dfs_station_reachability_by_stations(rail_system, TYPES.Wellington, TYPES.Johnsonville);
        2:  242:      Assert (Condition => (getStationByName(stations_list   => rail_system.All_Stations,
        -:  243:                                             stationLocation => TYPES.Johnsonville).isReachable) = True,
        -:  244:              Message => "Test_dfs_station_reachability_by_stations: reachable from wellington to johnsonvile");
        2:  245:       dfs_station_reachability_by_stations(rail_system, TYPES.UpperHutt, TYPES.Johnsonville);
        2:  246:      Assert (Condition => (getStationByName(stations_list   => rail_system.All_Stations,
        -:  247:                                             stationLocation => TYPES.Johnsonville).isReachable) = True,
        -:  248:              Message => "Test_dfs_station_reachability_by_stations: reachable from UpperHutt to johnsonvile");
        2:  249:   end Test_dfs_station_reachability_by_stations;
        -:  250:
        2:  251:   procedure Test_GET_ELEMENT_No_Found (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  252:   is
        -:  253:
        2:  254:      station: Stations.Station;
        -:  255:   begin
        2:  256:      Put_Line("");
        2:  257:      Put_Line("Test add station");
        2:  258:      addStation(rail_system, 1,TYPES.Wellington);
        2:  259:      station:=LIST_STATIONS.GET_ELEMENT(A        => rail_system.All_Stations,
        -:  260:                                         LOCATION => 0);
        2:  261:      Assert (Condition => (station.ID) = 0,
        -:  262:              Message => "Test_GET_ELEMENT_No_Found: Station not found");
        -:  263:
        2:  264:   end Test_GET_ELEMENT_No_Found;
        -:  265:
        2:  266:   procedure Test_Contains(CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  267:   is
        -:  268:
        2:  269:      station: Stations.Station;
        -:  270:      contain: Boolean;
        -:  271:   begin
        2:  272:      Put_Line("");
        2:  273:      Put_Line("Test add station");
        2:  274:      Init(r_system => rail_system);
        2:  275:      addStation(rail_system, 1,TYPES.Wellington);
        2:  276:      contain:=LIST_STATIONS.CONTAINS(A        => rail_system.All_Stations,
        2:  277:                                      D => LIST_STATIONS.GET_ELEMENT_BY_ID(A  => rail_system.All_Stations,
        -:  278:                                                                           ID => 1));
        2:  279:      Assert (Condition => (contain) = True,
        -:  280:              Message => "Test_Contains: true");
        -:  281:
        2:  282:   end Test_Contains;
        -:  283:
        -:  284:
        2:  285:   procedure Test_AddTrain (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  286:   is
        -:  287:
        2:  288:      TrainA: Trains.Train;
        2:  289:      TrainB: Trains.Train;
        2:  290:      TrainC: Trains.Train;
        -:  291:   begin
        2:  292:      Put_Line("");
        2:  293:      Put_Line("Test add train");
        2:  294:      Init(r_system => rail_system);
        -:  295:
        2:  296:      addTrain(rail_system, 1);
        -:  297:      -- Set train 1 current location to None (not on the railsystem)
        -:  298:      --        setTrainLocation(rail_system, trainA, "None", 1);
        2:  299:      TrainA := getTrainById(rail_system,1);
        -:  300:
        -:  301:
        2:  302:      addTrain(rail_system, 2);
        -:  303:      -- Set train 2 current location to None (not on the railsystem)
        -:  304:      --        setTrainLocation(rail_system, trainB, "None", 2);
        2:  305:      TrainB := getTrainById(rail_system,2);
        -:  306:
        2:  307:      addTrain(rail_system, 3);
        -:  308:      -- Set train 3 current location to None (not on the railsystem)
        -:  309:      --        setTrainLocation(rail_system, trainC, "None", 3);
        2:  310:      TrainC := getTrainById(rail_system,3);
        -:  311:
        2:  312:      Put_Line("total trains size: "& LIST_TRAINS.GET_SIZE(rail_system.All_Trains)'Image);
        -:  313:
        2:  314:      Assert (Condition => TrainA.ID = 1,
        -:  315:              Message => "trainA.id = 1");
        2:  316:   end Test_AddTrain;
        -:  317:
        2:  318:   procedure Test_AddTrack (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  319:   is
        -:  320:   begin
        2:  321:      Put_Line("");
        2:  322:      Put_Line("Test add tracks");
        2:  323:      Init(r_system => rail_system);
        2:  324:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        -:  325:
        2:  326:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(rail_system.All_Tracks)) = 1,
        -:  327:              Message => "total tracks added should = 1");
        2:  328:      Assert (Condition => (Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(rail_system.All_Tracks, 1).Origin) = TYPES.Wellington,
        -:  329:              Message=>"track origin should equals Wellington");
        2:  330:      Assert (Condition => (Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(A  => rail_system.All_Tracks,
        -:  331:                                                                   ID => 1).Destination) = TYPES.Petone,
        -:  332:              Message=>"track Destination should equals Petone");
        2:  333:   end Test_AddTrack;
        -:  334:
        -:  335:
        2:  336:   procedure Test_AddStation (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  337:   is
        -:  338:
        -:  339:
        -:  340:   begin
        2:  341:      Put_Line("");
        2:  342:      Put_Line("Test add station");
        2:  343:      Init(r_system => rail_system);
        2:  344:      addStation(rail_system, 1,TYPES.Wellington);
        -:  345:
        2:  346:      Assert (Condition => (LIST_STATIONS.GET_SIZE(rail_system.All_Stations)) = 1,
        -:  347:              Message => "total station added should = 1");
        2:  348:      Assert (Condition => (LIST_STATIONS.GET_ELEMENT_BY_ID(A  => rail_system.All_Stations,
        -:  349:                                                            ID => 1).Location) = TYPES.Wellington,
        -:  350:              Message=>"station location should equals Wellington");
        2:  351:   end Test_AddStation;
        -:  352:
        -:  353:
        2:  354:   procedure Test_AddIncomingTracksAndOutgoingTracks (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  355:   is
        -:  356:
        -:  357:
        -:  358:   begin
        2:  359:      Put_Line("");
        2:  360:      Put_Line("Test_AddIncomingTracksAndOutgoingTracks");
        2:  361:      Init(r_system => rail_system);
        -:  362:
        2:  363:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  364:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  365:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -:  366:
        2:  367:      addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:  368:      addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:  369:      addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:  370:      addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:  371:
        2:  372:      addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  373:      addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  374:      addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  375:
        2:  376:      addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:  377:      addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:  378:      addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:  379:      addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -:  380:
        2:  381:      addTrack(rail_system,  15, TYPES.Johnsonville, TYPES.UpperHutt, TYPES.Johnsonville, TYPES.UpperHutt);
        2:  382:      addTrack(rail_system,  16, TYPES.UpperHutt, TYPES.Johnsonville, TYPES.UpperHutt, TYPES.Johnsonville);
        -:  383:
        2:  384:      addStation(rail_system, 1,TYPES.Wellington);
        2:  385:      addStation(rail_system, 2,TYPES.Johnsonville);
        2:  386:      addStation(rail_system, 3,TYPES.UpperHutt);
        2:  387:      addStation(rail_system, 4,TYPES.LowerHutt);
        2:  388:      addStation(rail_system, 5,TYPES.Petone);
        2:  389:      addStation(rail_system, 6,TYPES.CroftonDowns);
        2:  390:      addStation(rail_system, 7,TYPES.Ngaio);
        2:  391:      addStation(rail_system, 8,TYPES.Khandallah);
        -:  392:
        2:  393:      addIncomingOutgoingTracksForEachStation(rail_system);
        -:  394:
        2:  395:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations, 1).Incoming)) = 2,
        -:  396:              Message => "wellington incoming tracks = 2");
        2:  397:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations, 1).Outgoing)) = 2,
        -:  398:              Message => "wellington outgoing tracks = 2");
        2:  399:      Assert (Condition => (Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(A  => LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Outgoing,
        -:  400:                                                                   ID => 1).Origin) = TYPES.Wellington,
        -:  401:              Message => "wellington outgoing track id 1's origin should equal wellington");
        4:  402:      Put_Line(Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(A  => LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Outgoing,
        2:  403:                                                      ID => 1).Destination'Image);
        2:  404:      Assert (Condition => (Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(A  => LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Outgoing,
        -:  405:                                                                   ID => 1).Destination) = TYPES.PETONE,
        -:  406:              Message => "wellington outgoing track id 1's Destination should equal PETONE");
        2:  407:   end Test_AddIncomingTracksAndOutgoingTracks;
        -:  408:
        -:  409:
        2:  410:   procedure Test_AlreadyAddTrackException (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  411:      procedure Test_Raising_Exception is
        -:  412:      begin
        2:  413:         Put_Line("");
        2:  414:         Put_Line("Test_AlreadyAddTrackException");
        2:  415:         Init(r_system => rail_system);
        2:  416:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  417:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        -:  418:
    #####:  419:      end;
        -:  420:   begin
        2:  421:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  422:                        Message =>"ADD TRACK: track already exist");
        2:  423:   end Test_AlreadyAddTrackException;
        -:  424:
        2:  425:   procedure Test_AddTrackTrackIDAlreadyUsedException (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  426:      procedure Test_Raising_Exception is
        -:  427:      begin
        2:  428:         Put_Line("");
        2:  429:         Put_Line("Test_AddTrackTrackIDAlreadyUsedException");
        2:  430:         Init(r_system => rail_system);
        2:  431:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  432:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        -:  433:
    #####:  434:      end;
        -:  435:   begin
        -:  436:
        2:  437:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  438:                        Message =>"ADD TRACK: track ID already used");
        -:  439:
        2:  440:   end Test_AddTrackTrackIDAlreadyUsedException;
        -:  441:
        2:  442:   procedure Test_AddTrack_Origin_Destination_Not_Station_Location_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  443:      procedure Test_Raising_Exception is
        -:  444:      begin
        2:  445:         Put_Line("");
        2:  446:         Put_Line("Test_AddTrack_Origin_Destination_Not_Station_Location_Exception");
        2:  447:         Init(r_system => rail_system);
        2:  448:         addTrack(rail_system,  1, TYPES.No, TYPES.No, TYPES.Wellington, TYPES.UpperHutt);
        -:  449:
    #####:  450:      end;
        -:  451:   begin
        2:  452:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  453:                        Message =>"ADD TRACK: Origin or Destionation has to be a Station location");
        2:  454:   end Test_AddTrack_Origin_Destination_Not_Station_Location_Exception;
        -:  455:
        2:  456:   procedure Test_AddTrack_Origin_equal_Destination_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  457:      procedure Test_Raising_Exception is
        -:  458:      begin
        2:  459:         Put_Line("");
        2:  460:         Put_Line("Test_AddTrack_Origin_equal_Destination_Exception");
        2:  461:         Init(r_system => rail_system);
        2:  462:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Wellington, TYPES.Wellington, TYPES.UpperHutt);
        -:  463:
    #####:  464:      end;
        -:  465:   begin
        2:  466:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  467:                        Message =>"ADD TRACK:  track Origin should not equals Destination");
        2:  468:   end Test_AddTrack_Origin_equal_Destination_Exception;
        -:  469:
        -:  470:
        2:  471:   procedure Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  472:      procedure Test_Raising_Exception is
        -:  473:      begin
        2:  474:         Put_Line("");
        2:  475:         Put_Line("Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception");
        2:  476:         Init(r_system => rail_system);
        2:  477:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Wellington);
        -:  478:
    #####:  479:      end;
        -:  480:   begin
        2:  481:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  482:                        Message =>"ADD TRACK: Tracks line origin should not equals tracks line destination");
        2:  483:   end Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception;
        -:  484:
        2:  485:   procedure Test_AddTrack_ID_Out_Of_Range_Less_1_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  486:      procedure Test_Raising_Exception is
        -:  487:      begin
        2:  488:         Put_Line("");
        2:  489:         Put_Line("Test_AlreadyAddTrackException");
        2:  490:         Init(r_system => rail_system);
        2:  491:         addTrack(rail_system, 0, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
    #####:  492:      end;
        -:  493:   begin
        2:  494:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  495:                        Message =>"ADD TRACK: ID should not less than 1");
        2:  496:   end Test_AddTrack_ID_Out_Of_Range_Less_1_Exception;
        -:  497:
        2:  498:   procedure Test_AddTrack_ID_Out_Of_Range_Great_100_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  499:      procedure Test_Raising_Exception is
        -:  500:      begin
        2:  501:         Put_Line("");
        2:  502:         Put_Line("Test_AddTrack_ID_Out_Of_Range_Great_100_Exception");
        2:  503:         Init(r_system => rail_system);
        2:  504:         addTrack(rail_system, 101, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        -:  505:
    #####:  506:      end;
        -:  507:   begin
        2:  508:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  509:                        Message =>"ADD TRACK: ID should not Great than 100");
        2:  510:   end Test_AddTrack_ID_Out_Of_Range_Great_100_Exception;
        -:  511:
        2:  512:   procedure Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  513:      procedure Test_Raising_Exception is
        2:  514:         TrainA: Trains.Train;
        -:  515:      begin
        2:  516:         Put_Line("");
        2:  517:         Put_Line("Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception");
        2:  518:         Init(r_system => rail_system);
        -:  519:
        2:  520:         addTrain(rail_system, 1);
        -:  521:         -- Set train 1 current location to None (not on the railsystem)
        -:  522:         --           setTrainLocation(rail_system, trainA, "None");
        2:  523:         TrainA := getTrainById(rail_system,0);
    #####:  524:      end;
        -:  525:   begin
        2:  526:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  527:                        Message =>"GET TRAIN BY ID: id should not less than 1");
        2:  528:   end Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception;
        -:  529:
        2:  530:   procedure Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  531:      procedure Test_Raising_Exception is
        2:  532:         TrainA: Trains.Train;
        -:  533:      begin
        2:  534:         Put_Line("");
        2:  535:         Put_Line("Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception");
        2:  536:         Init(r_system => rail_system);
        -:  537:
        2:  538:         addTrain(rail_system, 1);
        -:  539:         -- Set train 1 current location to None (not on the railsystem)
        -:  540:         --           setTrainLocation(rail_system, trainA, "None");
        2:  541:         TrainA := getTrainById(rail_system,2);
    #####:  542:      end;
        -:  543:   begin
        2:  544:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  545:                        Message =>"GET TRAIN BY ID: id out great than the size of the trains");
        2:  546:   end Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception;
        -:  547:
        -:  548:
        2:  549:   procedure Test_Add_Train_ID_Out_Of_Range_Less_1_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  550:      procedure Test_Raising_Exception is
        -:  551:
        -:  552:      begin
        2:  553:         Put_Line("");
        2:  554:         Put_Line("Test_Add_Train_ID_Out_Of_Range_Less_1_Exception");
        2:  555:         Init(r_system => rail_system);
        2:  556:         addTrain(rail_system, 0);
        -:  557:         -- Set train 1 current location to None (not on the railsystem)
        -:  558:
    #####:  559:      end;
        -:  560:   begin
        2:  561:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  562:                        Message =>"ADD TRAIN: ID should between 1 and 100");
        2:  563:   end Test_Add_Train_ID_Out_Of_Range_Less_1_Exception;
        -:  564:
        2:  565:   procedure Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  566:      procedure Test_Raising_Exception is
        -:  567:
        -:  568:      begin
        2:  569:         Put_Line("");
        2:  570:         Put_Line("Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception");
        2:  571:         Init(r_system => rail_system);
        -:  572:
        2:  573:         addTrain(rail_system, 1000);
    #####:  574:      end;
        -:  575:
        -:  576:   begin
        2:  577:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  578:                        Message =>"ADD TRAIN: ID should between 1 and 100");
        2:  579:   end Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception;
        -:  580:
        -:  581:
        2:  582:   procedure Test_Add_Station_Station_ID_Already_Exist_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  583:      procedure Test_Raising_Exception is
        -:  584:
        -:  585:      begin
        2:  586:         Put_Line("");
        2:  587:         Put_Line("Test_Add_Station_Station_ID_Already_Exist_Exception");
        2:  588:         Init(r_system => rail_system);
        -:  589:
        2:  590:         addStation(rail_system, 1,TYPES.Wellington);
        2:  591:         addStation(rail_system, 1,TYPES.Johnsonville);
    #####:  592:      end;
        -:  593:
        -:  594:   begin
        2:  595:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  596:                        Message =>"ADD STATION: station id already exist");
        2:  597:   end Test_Add_Station_Station_ID_Already_Exist_Exception;
        -:  598:
        -:  599:
        2:  600:   procedure Test_Add_Station_Location_Already_Exist_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  601:      procedure Test_Raising_Exception is
        -:  602:
        -:  603:      begin
        2:  604:         Put_Line("");
        2:  605:         Put_Line("Test_Add_Station_Location_Already_Exist_Exception");
        2:  606:         Init(r_system => rail_system);
        -:  607:
        2:  608:         addStation(rail_system, 1,TYPES.Wellington);
        2:  609:         addStation(rail_system, 2,TYPES.Wellington);
    #####:  610:      end;
        -:  611:
        -:  612:   begin
        2:  613:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  614:                        Message =>"ADD STATION: station id already exist");
        2:  615:   end Test_Add_Station_Location_Already_Exist_Exception;
        -:  616:
        2:  617:   procedure Test_Add_Station_ID_Out_Of_Range_Less_1_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  618:      procedure Test_Raising_Exception is
        -:  619:
        -:  620:      begin
        2:  621:         Put_Line("");
        2:  622:         Put_Line("Test_Add_Station_ID_Out_Of_Range_Less_1_Exception");
        2:  623:         Init(r_system => rail_system);
        -:  624:
        2:  625:         addStation(rail_system, 0,TYPES.Wellington);
        -:  626:         -- Set train 1 current location to None (not on the railsystem)
        -:  627:
    #####:  628:      end;
        -:  629:   begin
        2:  630:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  631:                        Message =>"ADD Station: ID should between 1 and 100");
        2:  632:   end Test_Add_Station_ID_Out_Of_Range_Less_1_Exception;
        -:  633:
        2:  634:   procedure Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  635:      procedure Test_Raising_Exception is
        -:  636:
        -:  637:      begin
        2:  638:         Put_Line("");
        2:  639:         Put_Line("Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception");
        2:  640:         Init(r_system => rail_system);
        -:  641:
        2:  642:         addStation(rail_system, 101,TYPES.Wellington);
    #####:  643:      end;
        -:  644:
        -:  645:   begin
        2:  646:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  647:                        Message =>"ADD Station: ID should between 1 and 100");
        -:  648:
        2:  649:   end Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception;
        -:  650:
        -:  651:
        -:  652:   --     procedure Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Less_1 (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        -:  653:   --        procedure Test_Raising_Exception is
        -:  654:   --           TrainA: Trains.Train;
        -:  655:   --        begin
        -:  656:   --           Put_Line("");
        -:  657:   --           Put_Line("Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Less_1");
        -:  658:   --
        -:  659:   --           addTrain(rail_system, 1);
        -:  660:   --  --           setTrainLocation(rail_system, trainA, "None");
        -:  661:   --
        -:  662:   --
        -:  663:   --        end;
        -:  664:   --     begin
        -:  665:   --        Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  666:   --                          Message =>"ADD Station: ID should between 1 and 100");
        -:  667:   --     end Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Less_1;
        -:  668:   --
        -:  669:   --     procedure Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Great_Trains_Size (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        -:  670:   --        procedure Test_Raising_Exception is
        -:  671:   --           TrainA: Trains.Train;
        -:  672:   --        begin
        -:  673:   --           Put_Line("");
        -:  674:   --           Put_Line("Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Great_Trains_Size");
        -:  675:   --
        -:  676:   --           addTrain(rail_system, 1);
        -:  677:   --  --           setTrainLocation(rail_system, trainA, "None");
        -:  678:   --        end;
        -:  679:   --
        -:  680:   --     begin
        -:  681:   --        Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  682:   --                          Message =>"ADD Station: ID should between 1 and 100");
        -:  683:   --     end Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Great_Trains_Size;
        -:  684:   --
        -:  685:   --
        -:  686:   --     procedure Test_Set_Train_Location_LocationName_Incorrect_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        -:  687:   --        procedure Test_Raising_Exception is
        -:  688:   --           TrainA: Trains.Train;
        -:  689:   --        begin
        -:  690:   --           Put_Line("");
        -:  691:   --           Put_Line("Test_Set_Train_Location_LocationName_Incorrect_Exception");
        -:  692:   --
        -:  693:   --           addTrain(rail_system, 1);
        -:  694:   --  --           setTrainLocation(rail_system, trainA, "a");
        -:  695:   --        end;
        -:  696:   --
        -:  697:   --     begin
        -:  698:   --        Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  699:   --                          Message =>"SET TRAIN LOCATION: location name should be None");
        -:  700:   --     end Test_Set_Train_Location_LocationName_Incorrect_Exception;
        -:  701:
        2:  702:   procedure Test_PrepareTrain (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  703:      TrainA: Trains.Train;
        -:  704:
        -:  705:   begin
        2:  706:      Put_Line("");
        2:  707:      Put_Line("Test_PrepareTrain");
        2:  708:      Init(r_system => rail_system);
        -:  709:
        2:  710:      addTrain(rail_system, 1);
        -:  711:      --        setTrainLocation(rail_system, trainA, "None");
        2:  712:      TrainA := getTrainById(rail_system,1);
        -:  713:
        2:  714:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  715:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  716:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  717:      addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  718:      addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  719:      addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  720:
        2:  721:      addStation(rail_system, 1,TYPES.Wellington);
        2:  722:      addStation(rail_system, 2,TYPES.UpperHutt);
        2:  723:      addStation(rail_system, 3,TYPES.LowerHutt);
        2:  724:      addStation(rail_system, 4,TYPES.Petone);
        -:  725:
        2:  726:      addIncomingOutgoingTracksForEachStation(rail_system);
        -:  727:
        2:  728:      prepareTrain(rail_system, trainA, Types.Wellington, Types.UpperHutt, TYPES.S8);
        -:  729:
        2:  730:      Put_Line(TrainA.Location.Track.ID'Image);
        2:  731:      Put_Line(TrainA.Location.Track.Destination'Image);
        2:  732:      Put_Line(TrainA.Location.Track.Origin'Image);
        2:  733:      Put_Line(TrainA.Location.currentLocation);
        -:  734:
        -:  735:
        2:  736:      Assert (Condition => (TrainA.Origin) = TYPES.Wellington,
        -:  737:              Message =>"TrainA.Origin = Wellington");
        2:  738:      Assert (Condition => (TrainA.State) = TYPES.Open,
        -:  739:              Message =>"TrainA.State = Open");
        2:  740:   end Test_PrepareTrain;
        -:  741:
        -:  742:
        2:  743:   procedure Test_PrepareTrain_Origin_Should_Not_Equals_No (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  744:      procedure Test_Raising_Exception is
        2:  745:         TrainA: Trains.Train;
        -:  746:      begin
        2:  747:         Put_Line("");
        2:  748:         Put_Line("Test_PrepareTrain_Origin_Should_Not_Equals_No");
        2:  749:         Init(r_system => rail_system);
        -:  750:
        2:  751:         addTrain(rail_system, 1);
        -:  752:         --        setTrainLocation(rail_system, trainA, "None");
        2:  753:         TrainA := getTrainById(rail_system,1);
        -:  754:
        2:  755:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  756:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  757:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  758:         addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  759:         addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  760:         addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  761:
        2:  762:         addStation(rail_system, 1,TYPES.Wellington);
        2:  763:         addStation(rail_system, 2,TYPES.UpperHutt);
        2:  764:         addStation(rail_system, 3,TYPES.LowerHutt);
        2:  765:         addStation(rail_system, 4,TYPES.Petone);
        -:  766:
        2:  767:         addIncomingOutgoingTracksForEachStation(rail_system);
        -:  768:
        2:  769:         prepareTrain(rail_system, trainA, Types.No, Types.UpperHutt, TYPES.S8);
    #####:  770:      end;
        -:  771:
        -:  772:   begin
        2:  773:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  774:                        Message =>"PREPARE TRAIN: Origin should not be TYPES.No");
        2:  775:   end Test_PrepareTrain_Origin_Should_Not_Equals_No;
        -:  776:
        2:  777:   procedure Test_PrepareTrain_Destionation_Should_Not_Equals_No (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  778:      procedure Test_Raising_Exception is
        2:  779:         TrainA: Trains.Train;
        -:  780:      begin
        2:  781:         Put_Line("");
        2:  782:         Put_Line("Test_PrepareTrain_Destionation_Should_Not_Equals_No");
        2:  783:         Init(r_system => rail_system);
        -:  784:
        2:  785:         addTrain(rail_system, 1);
        -:  786:         --        setTrainLocation(rail_system, trainA, "None");
        2:  787:         TrainA := getTrainById(rail_system,1);
        -:  788:
        2:  789:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  790:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  791:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  792:         addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  793:         addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  794:         addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  795:
        2:  796:         addStation(rail_system, 1,TYPES.Wellington);
        2:  797:         addStation(rail_system, 2,TYPES.UpperHutt);
        2:  798:         addStation(rail_system, 3,TYPES.LowerHutt);
        2:  799:         addStation(rail_system, 4,TYPES.Petone);
        -:  800:
        2:  801:         addIncomingOutgoingTracksForEachStation(rail_system);
        -:  802:
        2:  803:         prepareTrain(rail_system, trainA, Types.Wellington, Types.No, TYPES.S8);
    #####:  804:      end;
        -:  805:
        -:  806:   begin
        2:  807:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  808:                        Message =>"PREPARE TRAIN: Destionation should not be TYPES.No");
        2:  809:   end Test_PrepareTrain_Destionation_Should_Not_Equals_No;
        -:  810:
        2:  811:   procedure Test_PrepareTrain_Origin_Should_Not_Equals_Destionation (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  812:      procedure Test_Raising_Exception is
        2:  813:         TrainA: Trains.Train;
        -:  814:      begin
        2:  815:         Put_Line("");
        2:  816:         Put_Line("Test_PrepareTrain_Origin_Should_Not_Equals_Destionation");
        2:  817:         Init(r_system => rail_system);
        -:  818:
        2:  819:         addTrain(rail_system, 1);
        -:  820:         --           setTrainLocation(rail_system, trainA, "None");
        2:  821:         TrainA := getTrainById(rail_system,1);
        -:  822:
        2:  823:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  824:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  825:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  826:         addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  827:         addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  828:         addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  829:
        2:  830:         addStation(rail_system, 1,TYPES.Wellington);
        2:  831:         addStation(rail_system, 2,TYPES.UpperHutt);
        2:  832:         addStation(rail_system, 3,TYPES.LowerHutt);
        2:  833:         addStation(rail_system, 4,TYPES.Petone);
        -:  834:
        2:  835:         addIncomingOutgoingTracksForEachStation(rail_system);
        -:  836:
        2:  837:         prepareTrain(rail_system, trainA, Types.Wellington, Types.Wellington, TYPES.S8);
    #####:  838:      end;
        -:  839:
        -:  840:   begin
        2:  841:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  842:                        Message =>"PREPARE TRAIN: Destionation should not be TYPES.No");
        2:  843:   end Test_PrepareTrain_Origin_Should_Not_Equals_Destionation;
        -:  844:
        -:  845:
        2:  846:   procedure Test_PrepareTrain_Already_Train_At_Station (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  847:      procedure Test_Raising_Exception is
        2:  848:         TrainA: Trains.Train;
        2:  849:         TrainB: Trains.Train;
        2:  850:         station: Stations.Station;
        -:  851:      begin
        2:  852:         Put_Line("");
        2:  853:         Put_Line("Test_PrepareTrain_Already_Train_At_Station");
        2:  854:         Init(r_system => rail_system);
        -:  855:
        2:  856:         addTrain(rail_system, 1);
        -:  857:         --           setTrainLocation(rail_system, trainA, "None");
        2:  858:         TrainA := getTrainById(rail_system,1);
        2:  859:         addTrain(rail_system, 2);
        -:  860:         --           setTrainLocation(rail_system, trainB, "None");
        2:  861:         TrainB := getTrainById(rail_system,2);
        2:  862:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  863:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  864:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  865:         addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  866:         addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  867:         addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  868:
        2:  869:         addStation(rail_system, 1,TYPES.Wellington);
        2:  870:         addStation(rail_system, 2,TYPES.UpperHutt);
        2:  871:         addStation(rail_system, 3,TYPES.LowerHutt);
        2:  872:         addStation(rail_system, 4,TYPES.Petone);
        -:  873:
        2:  874:         addIncomingOutgoingTracksForEachStation(rail_system);
        2:  875:         TrainA.State:=TYPES.Open;
        2:  876:         TrainA.Origin:=TYPES.Wellington;
        2:  877:         TrainA.Destination:= TYPES.Johnsonville;
        2:  878:         TrainA.Location.Station.TrainID:=TrainA.ID;
        2:  879:         station:= LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations, 1);
        2:  880:         station.TrainID:=TrainA.ID;
        2:  881:         replaceStation(rail_system,station );
        2:  882:         prepareTrain(rail_system, trainB, Types.Wellington, Types.Johnsonville, TYPES.S8);
    #####:  883:      end;
        -:  884:
        -:  885:   begin
        2:  886:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  887:                        Message =>"PREPARE TRAIN: Already train at station");
        2:  888:   end Test_PrepareTrain_Already_Train_At_Station;
        -:  889:
        2:  890:   procedure Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  891:      procedure Test_Raising_Exception is
        2:  892:         TrainB: Trains.Train;
        -:  893:      begin
        2:  894:         Put_Line("");
        2:  895:         Put_Line("Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line");
        2:  896:         Init(r_system => rail_system);
        -:  897:
        2:  898:         addTrain(rail_system, 1);
        -:  899:         --           setTrainLocation(rail_system, trainB, "None");
        2:  900:         TrainB := getTrainById(rail_system,1);
        -:  901:
        2:  902:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  903:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  904:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -:  905:
        2:  906:         addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:  907:         addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:  908:         addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:  909:         addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:  910:
        2:  911:         addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  912:         addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  913:         addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  914:
        2:  915:         addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:  916:         addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:  917:         addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:  918:         addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -:  919:
        2:  920:         addStation(rail_system, 1,TYPES.Wellington);
        2:  921:         addStation(rail_system, 2,TYPES.Johnsonville);
        2:  922:         addStation(rail_system, 3,TYPES.UpperHutt);
        2:  923:         addStation(rail_system, 4,TYPES.LowerHutt);
        2:  924:         addStation(rail_system, 5,TYPES.Petone);
        2:  925:         addStation(rail_system, 6,TYPES.CroftonDowns);
        2:  926:         addStation(rail_system, 7,TYPES.Ngaio);
        2:  927:         addStation(rail_system, 8,TYPES.Khandallah);
        -:  928:
        2:  929:         addIncomingOutgoingTracksForEachStation(rail_system);
        -:  930:
        2:  931:         prepareTrain(rail_system, trainB, Types.UpperHutt, Types.Johnsonville, TYPES.S8);
    #####:  932:      end;
        -:  933:
        -:  934:   begin
        2:  935:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  936:                        Message =>"PREPARE TRAIN: Origin station and Destionation station not at the same route line");
        2:  937:   end Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line;
        -:  938:
        2:  939:   procedure Test_Get_Station_By_Name (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  940:   is
        -:  941:
        2:  942:      station:Stations.Station;
        -:  943:   begin
        2:  944:      Put_Line("");
        2:  945:      Put_Line("Test_Get_Station_By_Name");
        2:  946:      Init(r_system => rail_system);
        -:  947:
        -:  948:
        2:  949:      addStation(rail_system, 1,TYPES.Wellington);
        2:  950:      station:= getStationByName(rail_system.All_Stations, TYPES.Wellington);
        -:  951:
        2:  952:      Assert (Condition => (station.ID) = 1,
        -:  953:              Message => "StationLocation  = Wellington");
        -:  954:
        2:  955:   end Test_Get_Station_By_Name;
        -:  956:
        -:  957:
        2:  958:   procedure Test_Get_Track_By_Name (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  959:   is
        -:  960:
        2:  961:      track:Tracks.Track;
        -:  962:   begin
        2:  963:      Put_Line("");
        2:  964:      Put_Line("Test_Get_Track_By_Name");
        -:  965:
        2:  966:      Init(r_system => rail_system);
        -:  967:
        2:  968:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        -:  969:
        2:  970:      track:= getTrackByName(rail_system, TYPES.Wellington, TYPES.Petone);
        -:  971:
        2:  972:      Assert (Condition => (track.ID) = 1,
        -:  973:              Message => "track id = 1");
        2:  974:      track:= getTrackByName(rail_system, TYPES.Petone, TYPES.LowerHutt);
        -:  975:
        2:  976:      Assert (Condition => (track.ID) = 0,
        -:  977:              Message => "track petone to lower hutt not exist");
        -:  978:
        2:  979:   end Test_Get_Track_By_Name;
        -:  980:
        2:  981:   procedure Test_Go(CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  982:   is
        2:  983:      TrainA: Trains.Train;
        2:  984:      TrainB: Trains.Train;
        -:  985:
        2:  986:      track:Tracks.Track;
        -:  987:   begin
        2:  988:      Put_Line("");
        2:  989:      Put_Line("Test_Go");
        -:  990:
        2:  991:      Init(r_system => rail_system);
        -:  992:
        2:  993:      addTrain(rail_system, 1);
        2:  994:      TrainA := getTrainById(rail_system,1);
        2:  995:      addTrain(rail_system, 2);
        2:  996:      TrainB := getTrainById(rail_system,2);
        -:  997:
        2:  998:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  999:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2: 1000:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -: 1001:
        2: 1002:      addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2: 1003:      addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2: 1004:      addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2: 1005:      addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -: 1006:
        2: 1007:      addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2: 1008:      addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2: 1009:      addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -: 1010:
        2: 1011:      addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2: 1012:      addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2: 1013:      addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2: 1014:      addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -: 1015:
        2: 1016:      addStation(rail_system, 1,TYPES.Wellington);
        2: 1017:      addStation(rail_system, 2,TYPES.Johnsonville);
        2: 1018:      addStation(rail_system, 3,TYPES.UpperHutt);
        2: 1019:      addStation(rail_system, 4,TYPES.LowerHutt);
        2: 1020:      addStation(rail_system, 5,TYPES.Petone);
        2: 1021:      addStation(rail_system, 6,TYPES.CroftonDowns);
        2: 1022:      addStation(rail_system, 7,TYPES.Ngaio);
        2: 1023:      addStation(rail_system, 8,TYPES.Khandallah);
        -: 1024:
        2: 1025:      addIncomingOutgoingTracksForEachStation(rail_system);
        2: 1026:      prepareTrain(rail_system, trainA, Types.Wellington, Types.Johnsonville, TYPES.S8);
        2: 1027:      go(rail_system,trainA,10);
        -: 1028:
        -: 1029:
        2: 1030:      Assert (Condition => (trainA.Location.Track.ID) = 14,
        -: 1031:              Message => "TEST GO: trainA stop at Track id 14");
        2: 1032:      Assert (Condition => (trainA.Location.Track.Origin) = TYPES.Johnsonville,
        -: 1033:              Message => "TEST GO: trainA stop at Track origin: johnsonville");
        2: 1034:      Assert (Condition => (trainA.Location.Track.Destination) = TYPES.Khandallah,
        -: 1035:              Message => "TEST GO: trainA stop at Track destination: khandallah");
        2: 1036:   end Test_Go;
        -: 1037:
        2: 1038:   procedure Test_Go_Train_Already_On_Track (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2: 1039:      procedure Test_Raising_Exception is
        2: 1040:         TrainA: Trains.Train;
        2: 1041:         TrainB: Trains.Train;
        -: 1042:      begin
        -: 1043:
        2: 1044:         Put_Line("");
        2: 1045:         Put_Line("Test_Go_Train_Already_On_Track");
        2: 1046:         Init(r_system => rail_system);
        -: 1047:
        2: 1048:         addTrain(rail_system, 1);
        -: 1049:         --           setTrainLocation(rail_system, trainA, "None", 1);
        2: 1050:         TrainA := getTrainById(rail_system,1);
        2: 1051:         addTrain(rail_system, 2);
        -: 1052:         --           setTrainLocation(rail_system, trainB, "None", 2);
        2: 1053:         TrainB := getTrainById(rail_system,2);
        -: 1054:
        2: 1055:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2: 1056:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2: 1057:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -: 1058:
        2: 1059:         addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2: 1060:         addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2: 1061:         addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2: 1062:         addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -: 1063:
        2: 1064:         addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2: 1065:         addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2: 1066:         addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -: 1067:
        2: 1068:         addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2: 1069:         addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2: 1070:         addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2: 1071:         addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -: 1072:
        2: 1073:         addStation(rail_system, 1,TYPES.Wellington);
        2: 1074:         addStation(rail_system, 2,TYPES.Johnsonville);
        2: 1075:         addStation(rail_system, 3,TYPES.UpperHutt);
        2: 1076:         addStation(rail_system, 4,TYPES.LowerHutt);
        2: 1077:         addStation(rail_system, 5,TYPES.Petone);
        2: 1078:         addStation(rail_system, 6,TYPES.CroftonDowns);
        2: 1079:         addStation(rail_system, 7,TYPES.Ngaio);
        2: 1080:         addStation(rail_system, 8,TYPES.Khandallah);
        -: 1081:
        2: 1082:         addIncomingOutgoingTracksForEachStation(rail_system);
        2: 1083:         prepareTrain(rail_system, trainA, Types.Wellington, Types.Johnsonville, TYPES.S8);
        2: 1084:         prepareTrain(rail_system, trainB, Types.Johnsonville, Types.Wellington, TYPES.S8);
        2: 1085:         go(rail_system,trainA,10);
        2: 1086:         go(rail_system,trainB,10);
    #####: 1087:      end;
        -: 1088:
        -: 1089:   begin
        2: 1090:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -: 1091:                        Message =>"Test GO: trainA stopped at track id: 14, trainB can not move to track 14");
        2: 1092:   end Test_Go_Train_Already_On_Track;
        -: 1093:
        -: 1094:   --==========================================================
        -: 1095:   --               REGISTRATION/NAMING
        -: 1096:   --==========================================================
        -: 1097:   --
        2: 1098:   procedure Register_Tests (T: in out TC) is
        -: 1099:      use AUnit.Test_Cases.Registration;
        -: 1100:   begin
        2: 1101:      Register_Routine (Test => T,
        -: 1102:                        Routine => Test_AddTrain'Access,
        -: 1103:                        Name => "Test_AddTrain");
        2: 1104:      Register_Routine (Test => T,
        -: 1105:                        Routine => Test_AddTrack'Access,
        -: 1106:                        Name => "Test_AddTrack");
        2: 1107:      Register_Routine (Test => T,
        -: 1108:                        Routine => Test_AddStation'Access,
        -: 1109:                        Name => "Test_AddStation");
        2: 1110:      Register_Routine (Test => T,
        -: 1111:                        Routine => Test_AddIncomingTracksAndOutgoingTracks'Access,
        -: 1112:                        Name => "Test_AddIncomingTracksAndOutgoingTracks");
        -: 1113:
        2: 1114:      Register_Routine (Test => T,
        -: 1115:                        Routine => Test_AlreadyAddTrackException'Access,
        -: 1116:                        Name => "Test_AlreadyAddTrackException");
        -: 1117:
        2: 1118:      Register_Routine (Test => T,
        -: 1119:                        Routine => Test_AddTrackTrackIDAlreadyUsedException'Access,
        -: 1120:                        Name => "Test_AddTrackTrackIDAlreadyUsedException");
        -: 1121:
        2: 1122:      Register_Routine (Test => T,
        -: 1123:                        Routine => Test_AddTrack_Origin_Destination_Not_Station_Location_Exception'Access,
        -: 1124:                        Name => "Test_AddTrack_Origin_Destination_Not_Station_Location_Exception");
        -: 1125:
        2: 1126:      Register_Routine (Test => T,
        -: 1127:                        Routine => Test_AddTrack_Origin_equal_Destination_Exception'Access,
        -: 1128:                        Name => "Test_AddTrack_Origin_equal_Destination_Exception");
        2: 1129:      Register_Routine (Test => T,
        -: 1130:                        Routine => Test_AddTrack_ID_Out_Of_Range_Less_1_Exception'Access,
        -: 1131:                        Name => "Test_AddTrack_ID_Out_Of_Range_Less_1_Exception");
        2: 1132:      Register_Routine (Test => T,
        -: 1133:                        Routine => Test_AddTrack_ID_Out_Of_Range_Great_100_Exception'Access,
        -: 1134:                        Name => "Test_AddTrack_ID_Out_Of_Range_Great_100_Exception");
        2: 1135:      Register_Routine (Test => T,
        -: 1136:                        Routine => Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception'Access,
        -: 1137:                        Name => "Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception");
        2: 1138:      Register_Routine (Test => T,
        -: 1139:                        Routine => Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception'Access,
        -: 1140:                        Name => "Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception");
        2: 1141:      Register_Routine (Test => T,
        -: 1142:                        Routine => Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception'Access,
        -: 1143:                        Name => "Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception");
        2: 1144:      Register_Routine (Test => T,
        -: 1145:                        Routine => Test_Add_Train_ID_Out_Of_Range_Less_1_Exception'Access,
        -: 1146:                        Name => "Test_Add_Train_ID_Out_Of_Range_Less_1_Exception");
        2: 1147:      Register_Routine (Test => T,
        -: 1148:                        Routine => Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception'Access,
        -: 1149:                        Name => "Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception");
        2: 1150:      Register_Routine (Test => T,
        -: 1151:                        Routine => Test_Add_Station_Location_Already_Exist_Exception'Access,
        -: 1152:                        Name => "Test_Add_Station_Location_Already_Exist_Exception");
        2: 1153:      Register_Routine (Test => T,
        -: 1154:                        Routine => Test_Add_Station_ID_Out_Of_Range_Less_1_Exception'Access,
        -: 1155:                        Name => "Test_Add_Station_ID_Out_Of_Range_Less_1_Exception");
        -: 1156:
        2: 1157:      Register_Routine (Test => T,
        -: 1158:                        Routine => Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception'Access,
        -: 1159:                        Name => "Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception");
        2: 1160:      Register_Routine (Test => T,
        -: 1161:                        Routine => Test_GET_ELEMENT_No_Found'Access,
        -: 1162:                        Name => "Test_GET_ELEMENT_No_Found");
        2: 1163:      Register_Routine (Test => T,
        -: 1164:                        Routine => Test_Contains'Access,
        -: 1165:                        Name => "Test_Contains");
        2: 1166:      Register_Routine (Test => T,
        -: 1167:                        Routine => Test_Add_Station_Station_ID_Already_Exist_Exception'Access,
        -: 1168:                        Name => "Test_Add_Station_Station_ID_Already_Exist_Exception");
        -: 1169:
        2: 1170:      Register_Routine (Test => T,
        -: 1171:                        Routine => Test_PrepareTrain'Access,
        -: 1172:                        Name => "Test_PrepareTrain");
        2: 1173:      Register_Routine (Test => T,
        -: 1174:                        Routine => Test_PrepareTrain_Origin_Should_Not_Equals_No'Access,
        -: 1175:                        Name => "Test_PrepareTrain_Origin_Should_Not_Equals_No");
        2: 1176:      Register_Routine (Test => T,
        -: 1177:                        Routine => Test_PrepareTrain_Destionation_Should_Not_Equals_No'Access,
        -: 1178:                        Name => "Test_PrepareTrain_Destionation_Should_Not_Equals_No");
        2: 1179:      Register_Routine (Test => T,
        -: 1180:                        Routine => Test_PrepareTrain_Origin_Should_Not_Equals_Destionation'Access,
        -: 1181:                        Name => "Test_PrepareTrain_Origin_Should_Not_Equals_Destionation");
        -: 1182:
        2: 1183:      Register_Routine (Test => T,
        -: 1184:                        Routine => Test_PrepareTrain_Already_Train_At_Station'Access,
        -: 1185:                        Name => "Test_PrepareTrain_Already_Train_At_Station");
        2: 1186:      Register_Routine (Test => T,
        -: 1187:                        Routine => Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line'Access,
        -: 1188:                        Name => "Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line");
        2: 1189:      Register_Routine (Test => T,
        -: 1190:                        Routine => Test_Get_Station_By_Name'Access,
        -: 1191:                        Name => "Test_Get_Station_By_Name");
        2: 1192:      Register_Routine (Test => T,
        -: 1193:                        Routine => Test_Get_Track_By_Name'Access,
        -: 1194:                        Name => "Test_Get_Track_By_Name");
        2: 1195:      Register_Routine (Test => T,
        -: 1196:                        Routine => Test_Go'Access,
        -: 1197:                        Name => "Test_Go");
        2: 1198:      Register_Routine (Test => T,
        -: 1199:                        Routine => Test_Go_Train_Already_On_Track'Access,
        -: 1200:                        Name => "Test_Go_Train_Already_On_Track");
        2: 1201:      Register_Routine (Test => T,
        -: 1202:                        Routine => Test_dfs_station_reachability_by_train'Access,
        -: 1203:                        Name => "Test_dfs_station_reachability_by_train");
        2: 1204:      Register_Routine (Test => T,
        -: 1205:                        Routine => Test_dfs_station_reachability_by_stations'Access,
        -: 1206:                        Name => "Test_dfs_station_reachability_by_stations");
        -: 1207:
        2: 1208:        Register_Routine (Test => T,
        -: 1209:                        Routine => Test_dfs_station_reachability_by_train_base_location_No_Exception'Access,
        -: 1210:                        Name => "Test_dfs_station_reachability_by_train_base_location_No_Exception");
        2: 1211: Register_Routine (Test => T,
        -: 1212:                        Routine => Test_dfs_station_reachability_by_train_station_trainid_equls_zero_Exception'Access,
        -: 1213:                        Name => "Test_dfs_station_reachability_by_train_station_trainid_equls_zero_Exception");
        -: 1214:
        -: 1215:
        -: 1216:
        -: 1217:
        2: 1218:   end Register_Tests;
        -: 1219:
       70: 1220:   function Name (T: TC) return AUnit.Message_String is
        -: 1221:      pragma Unreferenced (T);
        -: 1222:   begin
       70: 1223:      return AUnit.Format ("Tests: Standard Tests");
        -: 1224:   end Name;
        -: 1225:
        2: 1226:end RailSystems.Test;
