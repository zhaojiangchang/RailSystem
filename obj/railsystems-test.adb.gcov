        -:    0:Source:C:/Users/JackyChang/Desktop/tutorial/RailSystem/src/_test/scenarios/railsystems-test.adb
        -:    0:Programs:38
        -:    1:with Ada.Text_IO; use Ada.Text_IO;
        -:    2:with AUnit.Assertions; use AUnit.Assertions;
        -:    3:with TYPES;
        -:    4:with sPrint;
        2:    5:package body RailSystems.Test is
        -:    6:
        2:    7:   rail_system: RailSystem;
        -:    8:   use all type TYPES.Station_Locations;
        -:    9:   use all type TYPES.MAX_SIZE;
        -:   10:   use all type TYPES.Train_State;
        -:   11:
        2:   12:   procedure Set_Up_Case (T: in out TC) is
        -:   13:      pragma Unreferenced (T);
        -:   14:
        -:   15:   begin
        2:   16:      New_Line;
        2:   17:      Put_Line ("Set up case ..");
        -:   18:
        2:   19:   end Set_Up_Case;
        -:   20:
        -:   21:
       62:   22:   procedure Set_Up (T : in out TC) is
        -:   23:   begin
       62:   24:      New_Line;
       62:   25:      Put_Line("Set Up ..");
       62:   26:      if LIST_STATIONS.GET_SIZE(rail_system.All_Stations) >0 then
    #####:   27:         LIST_STATIONS.DELETE_ALL(rail_system.All_Stations);
        -:   28:      end if;
       62:   29:      if  LIST_TRAINS.GET_SIZE(rail_system.All_Trains) >0 then
    #####:   30:         LIST_TRAINS.DELETE_ALL(rail_system.All_Trains);
        -:   31:      end if;
       62:   32:      if Stations.LIST_TRACKS.GET_SIZE(rail_system.All_Tracks) >0 then
    #####:   33:         Stations.LIST_TRACKS.DELETE_ALL(rail_system.All_Tracks);
        -:   34:      end if;
       62:   35:      Put_Line ("finish Set up ..");
       62:   36:      Init(rail_system);
        -:   37:
        -:   38:
        -:   39:
       62:   40:   end;
        -:   41:
       62:   42:   procedure Tear_Down (T : in out TC) is
        -:   43:   begin
       62:   44:      Put_Line("Tear Down ...");
       62:   45:      if LIST_STATIONS.GET_SIZE(rail_system.All_Stations) >0 then
       30:   46:         LIST_STATIONS.DELETE_ALL(rail_system.All_Stations);
        -:   47:      end if;
       62:   48:      if  LIST_TRAINS.GET_SIZE(rail_system.All_Trains) >0 then
       22:   49:         LIST_TRAINS.DELETE_ALL(rail_system.All_Trains);
        -:   50:      end if;
       62:   51:      if Stations.LIST_TRACKS.GET_SIZE(rail_system.All_Tracks) >0 then
       26:   52:         Stations.LIST_TRACKS.DELETE_ALL(rail_system.All_Tracks);
        -:   53:      end if;
        -:   54:
       62:   55:      Init(rail_system);
        -:   56:
        -:   57:
       62:   58:   end;
        -:   59:
        2:   60:   procedure Tear_Down_Case (T : in out TC) is
        -:   61:   begin
        2:   62:      Put_Line ("Tear Down Case ..");
        2:   63:      if LIST_STATIONS.GET_SIZE(rail_system.All_Stations) >0 then
    #####:   64:         LIST_STATIONS.DELETE_ALL(rail_system.All_Stations);
        -:   65:      end if;
        2:   66:      if  LIST_TRAINS.GET_SIZE(rail_system.All_Trains) >0 then
    #####:   67:         LIST_TRAINS.DELETE_ALL(rail_system.All_Trains);
        -:   68:      end if;
        2:   69:      if Stations.LIST_TRACKS.GET_SIZE(rail_system.All_Tracks) >0 then
    #####:   70:         Stations.LIST_TRACKS.DELETE_ALL(rail_system.All_Tracks);
        -:   71:      end if;
        2:   72:      Init(rail_system);
        -:   73:
        2:   74:   end;
        -:   75:
        -:   76:   -- ===========================================================
        -:   77:   --                 TEST CASES/SCENARIOS
        -:   78:   -- ===========================================================
        -:   79:
        2:   80:   procedure Test_GET_ELEMENT_No_Found (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:   81:   is
        -:   82:
        2:   83:      station: Stations.Station;
        -:   84:   begin
        2:   85:      Put_Line("");
        2:   86:      Put_Line("Test add station");
        2:   87:      addStation(rail_system, 1,TYPES.Wellington);
        2:   88:      station:=LIST_STATIONS.GET_ELEMENT(A        => rail_system.All_Stations,
        -:   89:                                LOCATION => 0);
        2:   90:      Assert (Condition => (station.ID) = 0,
        -:   91:              Message => "Test_GET_ELEMENT_No_Found: Station not found");
        -:   92:
        2:   93:   end Test_GET_ELEMENT_No_Found;
        -:   94:
        2:   95:   procedure Test_Contains(CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:   96:   is
        -:   97:
        2:   98:      station: Stations.Station;
        -:   99:      contain: Boolean;
        -:  100:   begin
        2:  101:      Put_Line("");
        2:  102:      Put_Line("Test add station");
        2:  103:      addStation(rail_system, 1,TYPES.Wellington);
        2:  104:      contain:=LIST_STATIONS.CONTAINS(A        => rail_system.All_Stations,
        2:  105:                                      D => LIST_STATIONS.GET_ELEMENT_BY_ID(A  => rail_system.All_Stations,
        -:  106:                                                                           ID => 1));
        2:  107:      Assert (Condition => (contain) = True,
        -:  108:              Message => "Test_Contains: true");
        -:  109:
        2:  110:   end Test_Contains;
        -:  111:
        -:  112:
        2:  113:   procedure Test_AddTrain (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  114:   is
        -:  115:
        2:  116:      TrainA: Trains.Train;
        2:  117:      TrainB: Trains.Train;
        2:  118:      TrainC: Trains.Train;
        -:  119:   begin
        2:  120:      Put_Line("");
        2:  121:      Put_Line("Test add train");
        -:  122:
        2:  123:      addTrain(rail_system, 1);
        -:  124:      -- Set train 1 current location to None (not on the railsystem)
        -:  125:--        setTrainLocation(rail_system, trainA, "None", 1);
        2:  126:      TrainA := getTrainById(rail_system,1);
        -:  127:
        -:  128:
        2:  129:      addTrain(rail_system, 2);
        -:  130:      -- Set train 2 current location to None (not on the railsystem)
        -:  131:--        setTrainLocation(rail_system, trainB, "None", 2);
        2:  132:      TrainB := getTrainById(rail_system,2);
        -:  133:
        2:  134:      addTrain(rail_system, 3);
        -:  135:      -- Set train 3 current location to None (not on the railsystem)
        -:  136:--        setTrainLocation(rail_system, trainC, "None", 3);
        2:  137:      TrainC := getTrainById(rail_system,3);
        -:  138:
        2:  139:      Put_Line("total trains size: "& LIST_TRAINS.GET_SIZE(rail_system.All_Trains)'Image);
        -:  140:
        2:  141:      Assert (Condition => TrainA.ID = 1,
        -:  142:              Message => "trainA.id = 1");
        2:  143:   end Test_AddTrain;
        -:  144:
        2:  145:   procedure Test_AddTrack (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  146:   is
        -:  147:
        -:  148:
        -:  149:   begin
        2:  150:      Put_Line("");
        2:  151:      Put_Line("Test add tracks");
        2:  152:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        -:  153:
        2:  154:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(rail_system.All_Tracks)) = 1,
        -:  155:              Message => "total tracks added should = 1");
        2:  156:      Assert (Condition => (Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(rail_system.All_Tracks, 1).Origin) = TYPES.Wellington,
        -:  157:              Message=>"track origin should equals Wellington");
        2:  158:      Assert (Condition => (Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(A  => rail_system.All_Tracks,
        -:  159:                                                                   ID => 1).Destination) = TYPES.Petone,
        -:  160:              Message=>"track Destination should equals Petone");
        2:  161:   end Test_AddTrack;
        -:  162:
        -:  163:
        2:  164:   procedure Test_AddStation (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  165:   is
        -:  166:
        -:  167:
        -:  168:   begin
        2:  169:      Put_Line("");
        2:  170:      Put_Line("Test add station");
        2:  171:      addStation(rail_system, 1,TYPES.Wellington);
        -:  172:
        2:  173:      Assert (Condition => (LIST_STATIONS.GET_SIZE(rail_system.All_Stations)) = 1,
        -:  174:              Message => "total station added should = 1");
        2:  175:      Assert (Condition => (LIST_STATIONS.GET_ELEMENT_BY_ID(A  => rail_system.All_Stations,
        -:  176:                                                            ID => 1).Location) = TYPES.Wellington,
        -:  177:              Message=>"station location should equals Wellington");
        2:  178:   end Test_AddStation;
        -:  179:
        -:  180:
        2:  181:   procedure Test_AddIncomingTracksAndOutgoingTracks (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  182:   is
        -:  183:
        -:  184:
        -:  185:   begin
        2:  186:      Put_Line("");
        2:  187:      Put_Line("Test_AddIncomingTracksAndOutgoingTracks");
        -:  188:
        2:  189:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  190:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  191:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -:  192:
        2:  193:      addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:  194:      addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:  195:      addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:  196:      addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:  197:
        2:  198:      addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  199:      addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  200:      addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  201:
        2:  202:      addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:  203:      addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:  204:      addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:  205:      addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -:  206:
        2:  207:      addStation(rail_system, 1,TYPES.Wellington);
        2:  208:      addStation(rail_system, 2,TYPES.Johnsonville);
        2:  209:      addStation(rail_system, 3,TYPES.UpperHutt);
        2:  210:      addStation(rail_system, 4,TYPES.LowerHutt);
        2:  211:      addStation(rail_system, 5,TYPES.Petone);
        2:  212:      addStation(rail_system, 6,TYPES.CroftonDowns);
        2:  213:      addStation(rail_system, 7,TYPES.Ngaio);
        2:  214:      addStation(rail_system, 8,TYPES.Khandallah);
        -:  215:
        2:  216:      addIncomingOutgoingTracksForEachStation(rail_system);
        -:  217:
        2:  218:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations, 1).Incoming)) = 2,
        -:  219:              Message => "wellington incoming tracks = 2");
        2:  220:      Assert (Condition => (Stations.LIST_TRACKS.GET_SIZE(LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations, 1).Outgoing)) = 2,
        -:  221:              Message => "wellington outgoing tracks = 2");
        2:  222:      Assert (Condition => (Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(A  => LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Outgoing,
        -:  223:                                                                   ID => 1).Origin) = TYPES.Wellington,
        -:  224:              Message => "wellington outgoing track id 1's origin should equal wellington");
        4:  225:      Put_Line(Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(A  => LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Outgoing,
        2:  226:                                                      ID => 1).Destination'Image);
        2:  227:      Assert (Condition => (Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(A  => LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations,1).Outgoing,
        -:  228:                                                                   ID => 1).Destination) = TYPES.PETONE,
        -:  229:              Message => "wellington outgoing track id 1's Destination should equal PETONE");
        2:  230:   end Test_AddIncomingTracksAndOutgoingTracks;
        -:  231:
        -:  232:
        2:  233:   procedure Test_AlreadyAddTrackException (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  234:      procedure Test_Raising_Exception is
        -:  235:      begin
        2:  236:         Put_Line("");
        2:  237:         Put_Line("Test_AlreadyAddTrackException");
        2:  238:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  239:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        -:  240:
    #####:  241:      end;
        -:  242:   begin
        2:  243:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  244:                        Message =>"ADD TRACK: track already exist");
        2:  245:   end Test_AlreadyAddTrackException;
        -:  246:
        2:  247:   procedure Test_AddTrackTrackIDAlreadyUsedException (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  248:      procedure Test_Raising_Exception is
        -:  249:      begin
        2:  250:         Put_Line("");
        2:  251:         Put_Line("Test_AddTrackTrackIDAlreadyUsedException");
        2:  252:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  253:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        -:  254:
    #####:  255:      end;
        -:  256:   begin
        -:  257:
        2:  258:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  259:                        Message =>"ADD TRACK: track ID already used");
        -:  260:
        2:  261:   end Test_AddTrackTrackIDAlreadyUsedException;
        -:  262:
        2:  263:   procedure Test_AddTrack_Origin_Destination_Not_Station_Location_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  264:      procedure Test_Raising_Exception is
        -:  265:      begin
        2:  266:         Put_Line("");
        2:  267:         Put_Line("Test_AddTrack_Origin_Destination_Not_Station_Location_Exception");
        2:  268:         addTrack(rail_system,  1, TYPES.No, TYPES.No, TYPES.Wellington, TYPES.UpperHutt);
        -:  269:
    #####:  270:      end;
        -:  271:   begin
        2:  272:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  273:                        Message =>"ADD TRACK: Origin or Destionation has to be a Station location");
        2:  274:   end Test_AddTrack_Origin_Destination_Not_Station_Location_Exception;
        -:  275:
        2:  276:   procedure Test_AddTrack_Origin_equal_Destination_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  277:      procedure Test_Raising_Exception is
        -:  278:      begin
        2:  279:         Put_Line("");
        2:  280:         Put_Line("Test_AddTrack_Origin_equal_Destination_Exception");
        2:  281:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Wellington, TYPES.Wellington, TYPES.UpperHutt);
        -:  282:
    #####:  283:      end;
        -:  284:   begin
        2:  285:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  286:                        Message =>"ADD TRACK:  track Origin should not equals Destination");
        2:  287:   end Test_AddTrack_Origin_equal_Destination_Exception;
        -:  288:
        -:  289:
        2:  290:   procedure Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  291:      procedure Test_Raising_Exception is
        -:  292:      begin
        2:  293:         Put_Line("");
        2:  294:         Put_Line("Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception");
        2:  295:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Wellington);
        -:  296:
    #####:  297:      end;
        -:  298:   begin
        2:  299:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  300:                        Message =>"ADD TRACK: Tracks line origin should not equals tracks line destination");
        2:  301:   end Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception;
        -:  302:
        2:  303:   procedure Test_AddTrack_ID_Out_Of_Range_Less_1_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  304:      procedure Test_Raising_Exception is
        -:  305:      begin
        2:  306:         Put_Line("");
        2:  307:         Put_Line("Test_AlreadyAddTrackException");
        2:  308:         addTrack(rail_system, 0, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
    #####:  309:      end;
        -:  310:   begin
        2:  311:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  312:                        Message =>"ADD TRACK: ID should not less than 1");
        2:  313:   end Test_AddTrack_ID_Out_Of_Range_Less_1_Exception;
        -:  314:
        2:  315:   procedure Test_AddTrack_ID_Out_Of_Range_Great_100_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  316:      procedure Test_Raising_Exception is
        -:  317:      begin
        2:  318:         Put_Line("");
        2:  319:         Put_Line("Test_AddTrack_ID_Out_Of_Range_Great_100_Exception");
        2:  320:         addTrack(rail_system, 101, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        -:  321:
    #####:  322:      end;
        -:  323:   begin
        2:  324:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  325:                        Message =>"ADD TRACK: ID should not Great than 100");
        2:  326:   end Test_AddTrack_ID_Out_Of_Range_Great_100_Exception;
        -:  327:
        2:  328:   procedure Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  329:      procedure Test_Raising_Exception is
        2:  330:         TrainA: Trains.Train;
        -:  331:      begin
        2:  332:         Put_Line("");
        2:  333:         Put_Line("Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception");
        -:  334:
        2:  335:         addTrain(rail_system, 1);
        -:  336:         -- Set train 1 current location to None (not on the railsystem)
        -:  337:--           setTrainLocation(rail_system, trainA, "None");
        2:  338:         TrainA := getTrainById(rail_system,0);
    #####:  339:      end;
        -:  340:   begin
        2:  341:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  342:                        Message =>"GET TRAIN BY ID: id should not less than 1");
        2:  343:   end Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception;
        -:  344:
        2:  345:   procedure Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  346:      procedure Test_Raising_Exception is
        2:  347:         TrainA: Trains.Train;
        -:  348:      begin
        2:  349:         Put_Line("");
        2:  350:         Put_Line("Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception");
        -:  351:
        2:  352:         addTrain(rail_system, 1);
        -:  353:         -- Set train 1 current location to None (not on the railsystem)
        -:  354:--           setTrainLocation(rail_system, trainA, "None");
        2:  355:         TrainA := getTrainById(rail_system,2);
    #####:  356:      end;
        -:  357:   begin
        2:  358:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  359:                        Message =>"GET TRAIN BY ID: id out great than the size of the trains");
        2:  360:   end Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception;
        -:  361:
        -:  362:
        2:  363:   procedure Test_Add_Train_ID_Out_Of_Range_Less_1_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  364:      procedure Test_Raising_Exception is
        2:  365:         TrainA: Trains.Train;
        -:  366:      begin
        2:  367:         Put_Line("");
        2:  368:         Put_Line("Test_Add_Train_ID_Out_Of_Range_Less_1_Exception");
        -:  369:
        2:  370:         addTrain(rail_system, 0);
        -:  371:         -- Set train 1 current location to None (not on the railsystem)
        -:  372:
    #####:  373:      end;
        -:  374:   begin
        2:  375:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  376:                        Message =>"ADD TRAIN: ID should between 1 and 100");
        2:  377:   end Test_Add_Train_ID_Out_Of_Range_Less_1_Exception;
        -:  378:
        2:  379:   procedure Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  380:      procedure Test_Raising_Exception is
        2:  381:         TrainA: Trains.Train;
        -:  382:      begin
        2:  383:         Put_Line("");
        2:  384:         Put_Line("Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception");
        -:  385:
        2:  386:         addTrain(rail_system, 1000);
    #####:  387:      end;
        -:  388:
        -:  389:   begin
        2:  390:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  391:                        Message =>"ADD TRAIN: ID should between 1 and 100");
        2:  392:   end Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception;
        -:  393:
        -:  394:
        2:  395:   procedure Test_Add_Station_Station_ID_Already_Exist_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  396:      procedure Test_Raising_Exception is
        2:  397:         TrainA: Trains.Train;
        -:  398:      begin
        2:  399:         Put_Line("");
        2:  400:         Put_Line("Test_Add_Station_Station_ID_Already_Exist_Exception");
        -:  401:
        2:  402:         addStation(rail_system, 1,TYPES.Wellington);
        2:  403:         addStation(rail_system, 1,TYPES.Johnsonville);
    #####:  404:      end;
        -:  405:
        -:  406:   begin
        2:  407:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  408:                        Message =>"ADD STATION: station id already exist");
        2:  409:   end Test_Add_Station_Station_ID_Already_Exist_Exception;
        -:  410:
        -:  411:
        2:  412:   procedure Test_Add_Station_Location_Already_Exist_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  413:      procedure Test_Raising_Exception is
        2:  414:         TrainA: Trains.Train;
        -:  415:      begin
        2:  416:         Put_Line("");
        2:  417:         Put_Line("Test_Add_Station_Location_Already_Exist_Exception");
        -:  418:
        2:  419:         addStation(rail_system, 1,TYPES.Wellington);
        2:  420:         addStation(rail_system, 2,TYPES.Wellington);
    #####:  421:      end;
        -:  422:
        -:  423:   begin
        2:  424:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  425:                        Message =>"ADD STATION: station id already exist");
        2:  426:   end Test_Add_Station_Location_Already_Exist_Exception;
        -:  427:
        2:  428:   procedure Test_Add_Station_ID_Out_Of_Range_Less_1_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  429:      procedure Test_Raising_Exception is
        2:  430:         TrainA: Trains.Train;
        -:  431:      begin
        2:  432:         Put_Line("");
        2:  433:         Put_Line("Test_Add_Station_ID_Out_Of_Range_Less_1_Exception");
        -:  434:
        2:  435:         addStation(rail_system, 0,TYPES.Wellington);
        -:  436:         -- Set train 1 current location to None (not on the railsystem)
        -:  437:
    #####:  438:      end;
        -:  439:   begin
        2:  440:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  441:                        Message =>"ADD Station: ID should between 1 and 100");
        2:  442:   end Test_Add_Station_ID_Out_Of_Range_Less_1_Exception;
        -:  443:
        2:  444:   procedure Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  445:      procedure Test_Raising_Exception is
        2:  446:         TrainA: Trains.Train;
        -:  447:      begin
        2:  448:         Put_Line("");
        2:  449:         Put_Line("Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception");
        -:  450:
        2:  451:         addStation(rail_system, 101,TYPES.Wellington);
    #####:  452:      end;
        -:  453:
        -:  454:   begin
        2:  455:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  456:                        Message =>"ADD Station: ID should between 1 and 100");
        -:  457:
        2:  458:   end Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception;
        -:  459:
        -:  460:
        -:  461:--     procedure Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Less_1 (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        -:  462:--        procedure Test_Raising_Exception is
        -:  463:--           TrainA: Trains.Train;
        -:  464:--        begin
        -:  465:--           Put_Line("");
        -:  466:--           Put_Line("Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Less_1");
        -:  467:--
        -:  468:--           addTrain(rail_system, 1);
        -:  469:--  --           setTrainLocation(rail_system, trainA, "None");
        -:  470:--
        -:  471:--
        -:  472:--        end;
        -:  473:--     begin
        -:  474:--        Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  475:--                          Message =>"ADD Station: ID should between 1 and 100");
        -:  476:--     end Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Less_1;
        -:  477:--
        -:  478:--     procedure Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Great_Trains_Size (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        -:  479:--        procedure Test_Raising_Exception is
        -:  480:--           TrainA: Trains.Train;
        -:  481:--        begin
        -:  482:--           Put_Line("");
        -:  483:--           Put_Line("Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Great_Trains_Size");
        -:  484:--
        -:  485:--           addTrain(rail_system, 1);
        -:  486:--  --           setTrainLocation(rail_system, trainA, "None");
        -:  487:--        end;
        -:  488:--
        -:  489:--     begin
        -:  490:--        Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  491:--                          Message =>"ADD Station: ID should between 1 and 100");
        -:  492:--     end Test_Set_Train_Location_LocationID_Out_Of_Range_Exception_Great_Trains_Size;
        -:  493:--
        -:  494:--
        -:  495:--     procedure Test_Set_Train_Location_LocationName_Incorrect_Exception (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        -:  496:--        procedure Test_Raising_Exception is
        -:  497:--           TrainA: Trains.Train;
        -:  498:--        begin
        -:  499:--           Put_Line("");
        -:  500:--           Put_Line("Test_Set_Train_Location_LocationName_Incorrect_Exception");
        -:  501:--
        -:  502:--           addTrain(rail_system, 1);
        -:  503:--  --           setTrainLocation(rail_system, trainA, "a");
        -:  504:--        end;
        -:  505:--
        -:  506:--     begin
        -:  507:--        Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  508:--                          Message =>"SET TRAIN LOCATION: location name should be None");
        -:  509:--     end Test_Set_Train_Location_LocationName_Incorrect_Exception;
        -:  510:
        2:  511:   procedure Test_PrepareTrain (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  512:      TrainA: Trains.Train;
        -:  513:
        -:  514:   begin
        2:  515:      Put_Line("");
        2:  516:      Put_Line("Test_PrepareTrain");
        -:  517:
        2:  518:      addTrain(rail_system, 1);
        -:  519:--        setTrainLocation(rail_system, trainA, "None");
        2:  520:      TrainA := getTrainById(rail_system,1);
        -:  521:
        2:  522:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  523:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  524:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  525:      addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  526:      addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  527:      addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  528:
        2:  529:      addStation(rail_system, 1,TYPES.Wellington);
        2:  530:      addStation(rail_system, 2,TYPES.UpperHutt);
        2:  531:      addStation(rail_system, 3,TYPES.LowerHutt);
        2:  532:      addStation(rail_system, 4,TYPES.Petone);
        -:  533:
        2:  534:      addIncomingOutgoingTracksForEachStation(rail_system);
        -:  535:
        2:  536:      prepareTrain(rail_system, trainA, Types.Wellington, Types.UpperHutt, TYPES.S8);
        -:  537:
        2:  538:      Put_Line(TrainA.Location.Track.ID'Image);
        2:  539:      Put_Line(TrainA.Location.Track.Destination'Image);
        2:  540:      Put_Line(TrainA.Location.Track.Origin'Image);
        2:  541:      Put_Line(TrainA.Location.currentLocation);
        -:  542:
        -:  543:
        2:  544:      Assert (Condition => (TrainA.Origin) = TYPES.Wellington,
        -:  545:              Message =>"TrainA.Origin = Wellington");
        2:  546:      Assert (Condition => (TrainA.State) = TYPES.Open,
        -:  547:              Message =>"TrainA.State = Open");
        2:  548:   end Test_PrepareTrain;
        -:  549:
        -:  550:
        2:  551:   procedure Test_PrepareTrain_Origin_Should_Not_Equals_No (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  552:      procedure Test_Raising_Exception is
        2:  553:         TrainA: Trains.Train;
        -:  554:      begin
        2:  555:         Put_Line("");
        2:  556:         Put_Line("Test_PrepareTrain_Origin_Should_Not_Equals_No");
        -:  557:
        2:  558:        addTrain(rail_system, 1);
        -:  559:--        setTrainLocation(rail_system, trainA, "None");
        2:  560:      TrainA := getTrainById(rail_system,1);
        -:  561:
        2:  562:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  563:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  564:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  565:      addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  566:      addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  567:      addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  568:
        2:  569:      addStation(rail_system, 1,TYPES.Wellington);
        2:  570:      addStation(rail_system, 2,TYPES.UpperHutt);
        2:  571:      addStation(rail_system, 3,TYPES.LowerHutt);
        2:  572:      addStation(rail_system, 4,TYPES.Petone);
        -:  573:
        2:  574:      addIncomingOutgoingTracksForEachStation(rail_system);
        -:  575:
        2:  576:      prepareTrain(rail_system, trainA, Types.No, Types.UpperHutt, TYPES.S8);
    #####:  577:      end;
        -:  578:
        -:  579:   begin
        2:  580:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  581:                        Message =>"PREPARE TRAIN: Origin should not be TYPES.No");
        2:  582:   end Test_PrepareTrain_Origin_Should_Not_Equals_No;
        -:  583:
        2:  584:   procedure Test_PrepareTrain_Destionation_Should_Not_Equals_No (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  585:      procedure Test_Raising_Exception is
        2:  586:         TrainA: Trains.Train;
        -:  587:      begin
        2:  588:         Put_Line("");
        2:  589:         Put_Line("Test_PrepareTrain_Destionation_Should_Not_Equals_No");
        -:  590:
        2:  591:        addTrain(rail_system, 1);
        -:  592:--        setTrainLocation(rail_system, trainA, "None");
        2:  593:      TrainA := getTrainById(rail_system,1);
        -:  594:
        2:  595:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  596:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  597:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  598:      addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  599:      addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  600:      addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  601:
        2:  602:      addStation(rail_system, 1,TYPES.Wellington);
        2:  603:      addStation(rail_system, 2,TYPES.UpperHutt);
        2:  604:      addStation(rail_system, 3,TYPES.LowerHutt);
        2:  605:      addStation(rail_system, 4,TYPES.Petone);
        -:  606:
        2:  607:      addIncomingOutgoingTracksForEachStation(rail_system);
        -:  608:
        2:  609:      prepareTrain(rail_system, trainA, Types.Wellington, Types.No, TYPES.S8);
    #####:  610:      end;
        -:  611:
        -:  612:   begin
        2:  613:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  614:                        Message =>"PREPARE TRAIN: Destionation should not be TYPES.No");
        2:  615:   end Test_PrepareTrain_Destionation_Should_Not_Equals_No;
        -:  616:
        2:  617:   procedure Test_PrepareTrain_Origin_Should_Not_Equals_Destionation (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  618:      procedure Test_Raising_Exception is
        2:  619:         TrainA: Trains.Train;
        -:  620:      begin
        2:  621:         Put_Line("");
        2:  622:         Put_Line("Test_PrepareTrain_Origin_Should_Not_Equals_Destionation");
        -:  623:
        2:  624:         addTrain(rail_system, 1);
        -:  625:--           setTrainLocation(rail_system, trainA, "None");
        2:  626:         TrainA := getTrainById(rail_system,1);
        -:  627:
        2:  628:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  629:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  630:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  631:         addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  632:         addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  633:         addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  634:
        2:  635:         addStation(rail_system, 1,TYPES.Wellington);
        2:  636:         addStation(rail_system, 2,TYPES.UpperHutt);
        2:  637:         addStation(rail_system, 3,TYPES.LowerHutt);
        2:  638:         addStation(rail_system, 4,TYPES.Petone);
        -:  639:
        2:  640:         addIncomingOutgoingTracksForEachStation(rail_system);
        -:  641:
        2:  642:         prepareTrain(rail_system, trainA, Types.Wellington, Types.Wellington, TYPES.S8);
    #####:  643:      end;
        -:  644:
        -:  645:   begin
        2:  646:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  647:                        Message =>"PREPARE TRAIN: Destionation should not be TYPES.No");
        2:  648:   end Test_PrepareTrain_Origin_Should_Not_Equals_Destionation;
        -:  649:
        -:  650:
        2:  651:   procedure Test_PrepareTrain_Already_Train_At_Station (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  652:      procedure Test_Raising_Exception is
        2:  653:         TrainA: Trains.Train;
        2:  654:         TrainB: Trains.Train;
        2:  655:         station: Stations.Station;
        -:  656:      begin
        2:  657:         Put_Line("");
        2:  658:         Put_Line("Test_PrepareTrain_Already_Train_At_Station");
        -:  659:
        2:  660:         addTrain(rail_system, 1);
        -:  661:--           setTrainLocation(rail_system, trainA, "None");
        2:  662:         TrainA := getTrainById(rail_system,1);
        2:  663:         addTrain(rail_system, 2);
        -:  664:--           setTrainLocation(rail_system, trainB, "None");
        2:  665:         TrainB := getTrainById(rail_system,2);
        2:  666:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  667:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  668:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  669:         addTrack(rail_system,  4, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  670:         addTrack(rail_system,  5, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  671:         addTrack(rail_system,  6, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  672:
        2:  673:         addStation(rail_system, 1,TYPES.Wellington);
        2:  674:         addStation(rail_system, 2,TYPES.UpperHutt);
        2:  675:         addStation(rail_system, 3,TYPES.LowerHutt);
        2:  676:         addStation(rail_system, 4,TYPES.Petone);
        -:  677:
        2:  678:         addIncomingOutgoingTracksForEachStation(rail_system);
        2:  679:         TrainA.State:=TYPES.Open;
        2:  680:         TrainA.Origin:=TYPES.Wellington;
        2:  681:         TrainA.Destination:= TYPES.Johnsonville;
        2:  682:         TrainA.Location.Station.TrainID:=TrainA.ID;
        2:  683:         station:= LIST_STATIONS.GET_ELEMENT_BY_ID(rail_system.All_Stations, 1);
        2:  684:         station.TrainID:=TrainA.ID;
        2:  685:         replaceStation(rail_system,station );
        2:  686:         prepareTrain(rail_system, trainB, Types.Wellington, Types.Johnsonville, TYPES.S8);
    #####:  687:      end;
        -:  688:
        -:  689:   begin
        2:  690:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  691:                        Message =>"PREPARE TRAIN: Already train at station");
        2:  692:   end Test_PrepareTrain_Already_Train_At_Station;
        -:  693:
        2:  694:     procedure Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  695:      procedure Test_Raising_Exception is
        2:  696:         TrainB: Trains.Train;
        -:  697:      begin
        2:  698:         Put_Line("");
        2:  699:         Put_Line("Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line");
        -:  700:
        2:  701:         addTrain(rail_system, 1);
        -:  702:--           setTrainLocation(rail_system, trainB, "None");
        2:  703:         TrainB := getTrainById(rail_system,1);
        -:  704:
        2:  705:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  706:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  707:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -:  708:
        2:  709:         addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:  710:         addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:  711:         addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:  712:         addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:  713:
        2:  714:         addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  715:         addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  716:         addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  717:
        2:  718:         addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:  719:         addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:  720:         addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:  721:         addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -:  722:
        2:  723:         addStation(rail_system, 1,TYPES.Wellington);
        2:  724:         addStation(rail_system, 2,TYPES.Johnsonville);
        2:  725:         addStation(rail_system, 3,TYPES.UpperHutt);
        2:  726:         addStation(rail_system, 4,TYPES.LowerHutt);
        2:  727:         addStation(rail_system, 5,TYPES.Petone);
        2:  728:         addStation(rail_system, 6,TYPES.CroftonDowns);
        2:  729:         addStation(rail_system, 7,TYPES.Ngaio);
        2:  730:         addStation(rail_system, 8,TYPES.Khandallah);
        -:  731:
        2:  732:         addIncomingOutgoingTracksForEachStation(rail_system);
        -:  733:
        2:  734:         prepareTrain(rail_system, trainB, Types.UpperHutt, Types.Johnsonville, TYPES.S8);
    #####:  735:      end;
        -:  736:
        -:  737:   begin
        2:  738:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  739:                        Message =>"PREPARE TRAIN: Origin station and Destionation station not at the same route line");
        2:  740:   end Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line;
        -:  741:
        2:  742:   procedure Test_Get_Station_By_Name (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  743:   is
        -:  744:
        2:  745:    station:Stations.Station;
        -:  746:   begin
        2:  747:      Put_Line("");
        2:  748:      Put_Line("Test_Get_Station_By_Name");
        -:  749:
        -:  750:
        2:  751:      addStation(rail_system, 1,TYPES.Wellington);
        2:  752:     station:= getStationByName(rail_system, TYPES.Wellington);
        -:  753:
        2:  754:      Assert (Condition => (station.ID) = 1,
        -:  755:              Message => "StationLocation  = Wellington");
        -:  756:
        2:  757:   end Test_Get_Station_By_Name;
        -:  758:
        -:  759:
        2:  760:   procedure Test_Get_Track_By_Name (CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  761:   is
        -:  762:
        2:  763:    track:Tracks.Track;
        -:  764:   begin
        2:  765:      Put_Line("");
        2:  766:      Put_Line("Test_Get_Track_By_Name");
        -:  767:
        -:  768:
        2:  769:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        -:  770:
        2:  771:      track:= getTrackByName(rail_system, TYPES.Wellington, TYPES.Petone);
        -:  772:
        2:  773:      Assert (Condition => (track.ID) = 1,
        -:  774:              Message => "track id = 1");
        2:  775:      track:= getTrackByName(rail_system, TYPES.Petone, TYPES.LowerHutt);
        -:  776:
        2:  777:      Assert (Condition => (track.ID) = 0,
        -:  778:              Message => "track petone to lower hutt not exist");
        -:  779:
        2:  780:   end Test_Get_Track_By_Name;
        -:  781:
        2:  782:   procedure Test_Go(CWTC : in out AUnit.Test_Cases.Test_Case'Class)
        -:  783:   is
        2:  784:      TrainA: Trains.Train;
        2:  785:      TrainB: Trains.Train;
        -:  786:
        2:  787:      track:Tracks.Track;
        -:  788:   begin
        2:  789:      Put_Line("");
        2:  790:      Put_Line("Test_Go");
        -:  791:
        -:  792:
        2:  793:      addTrain(rail_system, 1);
        2:  794:      TrainA := getTrainById(rail_system,1);
        2:  795:      addTrain(rail_system, 2);
        2:  796:      TrainB := getTrainById(rail_system,2);
        -:  797:
        2:  798:      addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  799:      addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  800:      addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -:  801:
        2:  802:      addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:  803:      addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:  804:      addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:  805:      addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:  806:
        2:  807:      addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  808:      addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  809:      addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  810:
        2:  811:      addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:  812:      addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:  813:      addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:  814:      addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -:  815:
        2:  816:      addStation(rail_system, 1,TYPES.Wellington);
        2:  817:      addStation(rail_system, 2,TYPES.Johnsonville);
        2:  818:      addStation(rail_system, 3,TYPES.UpperHutt);
        2:  819:      addStation(rail_system, 4,TYPES.LowerHutt);
        2:  820:      addStation(rail_system, 5,TYPES.Petone);
        2:  821:      addStation(rail_system, 6,TYPES.CroftonDowns);
        2:  822:      addStation(rail_system, 7,TYPES.Ngaio);
        2:  823:      addStation(rail_system, 8,TYPES.Khandallah);
        -:  824:
        2:  825:      addIncomingOutgoingTracksForEachStation(rail_system);
        2:  826:      prepareTrain(rail_system, trainA, Types.Wellington, Types.Johnsonville, TYPES.S8);
        2:  827:      go(rail_system,trainA,10);
        -:  828:
        -:  829:
        2:  830:      Assert (Condition => (trainA.Location.Track.ID) = 14,
        -:  831:              Message => "TEST GO: trainA stop at Track id 14");
        2:  832:       Assert (Condition => (trainA.Location.Track.Origin) = TYPES.Johnsonville,
        -:  833:               Message => "TEST GO: trainA stop at Track origin: johnsonville");
        2:  834:      Assert (Condition => (trainA.Location.Track.Destination) = TYPES.Khandallah,
        -:  835:              Message => "TEST GO: trainA stop at Track destination: khandallah");
        2:  836:   end Test_Go;
        -:  837:
        2:  838:   procedure Test_Go_Train_Already_On_Track (CWTC: in out AUnit.Test_Cases.Test_Case'Class) is
        2:  839:      procedure Test_Raising_Exception is
        2:  840:         TrainA: Trains.Train;
        2:  841:         TrainB: Trains.Train;
        -:  842:      begin
        -:  843:
        2:  844:         Put_Line("");
        2:  845:         Put_Line("Test_Go_Train_Already_On_Track");
        -:  846:
        2:  847:         addTrain(rail_system, 1);
        -:  848:--           setTrainLocation(rail_system, trainA, "None", 1);
        2:  849:         TrainA := getTrainById(rail_system,1);
        2:  850:         addTrain(rail_system, 2);
        -:  851:--           setTrainLocation(rail_system, trainB, "None", 2);
        2:  852:         TrainB := getTrainById(rail_system,2);
        -:  853:
        2:  854:         addTrack(rail_system,  1, TYPES.Wellington, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt);
        2:  855:         addTrack(rail_system,  2, TYPES.Petone, TYPES.LowerHutt, TYPES.Wellington, TYPES.UpperHutt);
        2:  856:         addTrack(rail_system,  3, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington, TYPES.UpperHutt);
        -:  857:
        2:  858:         addTrack(rail_system,  4, TYPES.Wellington, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville);
        2:  859:         addTrack(rail_system,  5, TYPES.CroftonDowns, TYPES.Ngaio, TYPES.Wellington, TYPES.Johnsonville);
        2:  860:         addTrack(rail_system,  6, TYPES.Ngaio, TYPES.Khandallah, TYPES.Wellington, TYPES.Johnsonville);
        2:  861:         addTrack(rail_system,  7, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington, TYPES.Johnsonville);
        -:  862:
        2:  863:         addTrack(rail_system,  8, TYPES.Petone, TYPES.Wellington, TYPES.UpperHutt, TYPES.Wellington);
        2:  864:         addTrack(rail_system,  9, TYPES.LowerHutt, TYPES.Petone, TYPES.UpperHutt, TYPES.Wellington);
        2:  865:         addTrack(rail_system,  10, TYPES.UpperHutt, TYPES.LowerHutt, TYPES.UpperHutt, TYPES.Wellington);
        -:  866:
        2:  867:         addTrack(rail_system,  11, TYPES.CroftonDowns, TYPES.Wellington, TYPES.Johnsonville, TYPES.Wellington);
        2:  868:         addTrack(rail_system,  12, TYPES.Ngaio, TYPES.CroftonDowns, TYPES.Johnsonville, TYPES.Wellington);
        2:  869:         addTrack(rail_system,  13, TYPES.Khandallah, TYPES.Ngaio, TYPES.Johnsonville, TYPES.Wellington);
        2:  870:         addTrack(rail_system,  14, TYPES.Johnsonville, TYPES.Khandallah, TYPES.Johnsonville, TYPES.Wellington);
        -:  871:
        2:  872:         addStation(rail_system, 1,TYPES.Wellington);
        2:  873:         addStation(rail_system, 2,TYPES.Johnsonville);
        2:  874:         addStation(rail_system, 3,TYPES.UpperHutt);
        2:  875:         addStation(rail_system, 4,TYPES.LowerHutt);
        2:  876:         addStation(rail_system, 5,TYPES.Petone);
        2:  877:         addStation(rail_system, 6,TYPES.CroftonDowns);
        2:  878:         addStation(rail_system, 7,TYPES.Ngaio);
        2:  879:         addStation(rail_system, 8,TYPES.Khandallah);
        -:  880:
        2:  881:         addIncomingOutgoingTracksForEachStation(rail_system);
        2:  882:         prepareTrain(rail_system, trainA, Types.Wellington, Types.Johnsonville, TYPES.S8);
        2:  883:         prepareTrain(rail_system, trainB, Types.Johnsonville, Types.Wellington, TYPES.S8);
        2:  884:         go(rail_system,trainA,10);
        2:  885:         go(rail_system,trainB,10);
    #####:  886:      end;
        -:  887:
        -:  888:   begin
        2:  889:      Assert_Exception (Proc => Test_Raising_Exception'Unrestricted_Access,
        -:  890:                        Message =>"Test GO: trainA stopped at track id: 14, trainB can not move to track 14");
        2:  891:   end Test_Go_Train_Already_On_Track;
        -:  892:
        -:  893:   --==========================================================
        -:  894:   --               REGISTRATION/NAMING
        -:  895:   --==========================================================
        -:  896:   --
        2:  897:   procedure Register_Tests (T: in out TC) is
        -:  898:      use AUnit.Test_Cases.Registration;
        -:  899:   begin
        2:  900:      Register_Routine (Test => T,
        -:  901:                        Routine => Test_AddTrain'Access,
        -:  902:                        Name => "Test_AddTrain");
        2:  903:      Register_Routine (Test => T,
        -:  904:                        Routine => Test_AddTrack'Access,
        -:  905:                        Name => "Test_AddTrack");
        2:  906:      Register_Routine (Test => T,
        -:  907:                        Routine => Test_AddStation'Access,
        -:  908:                        Name => "Test_AddStation");
        2:  909:      Register_Routine (Test => T,
        -:  910:                        Routine => Test_AddIncomingTracksAndOutgoingTracks'Access,
        -:  911:                        Name => "Test_AddIncomingTracksAndOutgoingTracks");
        -:  912:
        2:  913:      Register_Routine (Test => T,
        -:  914:                        Routine => Test_AlreadyAddTrackException'Access,
        -:  915:                        Name => "Test_AlreadyAddTrackException");
        -:  916:
        2:  917:      Register_Routine (Test => T,
        -:  918:                        Routine => Test_AddTrackTrackIDAlreadyUsedException'Access,
        -:  919:                        Name => "Test_AddTrackTrackIDAlreadyUsedException");
        -:  920:
        2:  921:      Register_Routine (Test => T,
        -:  922:                        Routine => Test_AddTrack_Origin_Destination_Not_Station_Location_Exception'Access,
        -:  923:                        Name => "Test_AddTrack_Origin_Destination_Not_Station_Location_Exception");
        -:  924:
        2:  925:      Register_Routine (Test => T,
        -:  926:                        Routine => Test_AddTrack_Origin_equal_Destination_Exception'Access,
        -:  927:                        Name => "Test_AddTrack_Origin_equal_Destination_Exception");
        2:  928:      Register_Routine (Test => T,
        -:  929:                        Routine => Test_AddTrack_ID_Out_Of_Range_Less_1_Exception'Access,
        -:  930:                        Name => "Test_AddTrack_ID_Out_Of_Range_Less_1_Exception");
        2:  931:      Register_Routine (Test => T,
        -:  932:                        Routine => Test_AddTrack_ID_Out_Of_Range_Great_100_Exception'Access,
        -:  933:                        Name => "Test_AddTrack_ID_Out_Of_Range_Great_100_Exception");
        2:  934:      Register_Routine (Test => T,
        -:  935:                        Routine => Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception'Access,
        -:  936:                        Name => "Test_AddTrack_Tracks_Line_Origin_Destination_Equal_Exception");
        2:  937:      Register_Routine (Test => T,
        -:  938:                        Routine => Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception'Access,
        -:  939:                        Name => "Test_Get_Train_By_ID_ID_Out_Of_Range_Less_1_Exception");
        2:  940:      Register_Routine (Test => T,
        -:  941:                        Routine => Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception'Access,
        -:  942:                        Name => "Test_Get_Train_By_ID_ID_Out_Of_Range_Great_Train_Size_Exception");
        2:  943:      Register_Routine (Test => T,
        -:  944:                        Routine => Test_Add_Train_ID_Out_Of_Range_Less_1_Exception'Access,
        -:  945:                        Name => "Test_Add_Train_ID_Out_Of_Range_Less_1_Exception");
        2:  946:      Register_Routine (Test => T,
        -:  947:                        Routine => Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception'Access,
        -:  948:                        Name => "Test_Add_Train_ID_Out_Of_Range_Great_MaxSize_Exception");
        2:  949:      Register_Routine (Test => T,
        -:  950:                        Routine => Test_Add_Station_Location_Already_Exist_Exception'Access,
        -:  951:                        Name => "Test_Add_Station_Location_Already_Exist_Exception");
        2:  952:      Register_Routine (Test => T,
        -:  953:                        Routine => Test_Add_Station_ID_Out_Of_Range_Less_1_Exception'Access,
        -:  954:                        Name => "Test_Add_Station_ID_Out_Of_Range_Less_1_Exception");
        -:  955:
        2:  956:      Register_Routine (Test => T,
        -:  957:                        Routine => Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception'Access,
        -:  958:                        Name => "Test_Add_Station_ID_Out_Of_Range_Great_MaxSize_Exception");
        2:  959:      Register_Routine (Test => T,
        -:  960:                        Routine => Test_GET_ELEMENT_No_Found'Access,
        -:  961:                        Name => "Test_GET_ELEMENT_No_Found");
        2:  962:      Register_Routine (Test => T,
        -:  963:                        Routine => Test_Contains'Access,
        -:  964:                        Name => "Test_Contains");
        2:  965:      Register_Routine (Test => T,
        -:  966:                        Routine => Test_Add_Station_Station_ID_Already_Exist_Exception'Access,
        -:  967:                        Name => "Test_Add_Station_Station_ID_Already_Exist_Exception");
        -:  968:
        2:  969:      Register_Routine (Test => T,
        -:  970:                        Routine => Test_PrepareTrain'Access,
        -:  971:                        Name => "Test_PrepareTrain");
        2:  972:      Register_Routine (Test => T,
        -:  973:                        Routine => Test_PrepareTrain_Origin_Should_Not_Equals_No'Access,
        -:  974:                        Name => "Test_PrepareTrain_Origin_Should_Not_Equals_No");
        2:  975:      Register_Routine (Test => T,
        -:  976:                        Routine => Test_PrepareTrain_Destionation_Should_Not_Equals_No'Access,
        -:  977:                        Name => "Test_PrepareTrain_Destionation_Should_Not_Equals_No");
        2:  978:      Register_Routine (Test => T,
        -:  979:                        Routine => Test_PrepareTrain_Origin_Should_Not_Equals_Destionation'Access,
        -:  980:                        Name => "Test_PrepareTrain_Origin_Should_Not_Equals_Destionation");
        -:  981:
        2:  982:      Register_Routine (Test => T,
        -:  983:                        Routine => Test_PrepareTrain_Already_Train_At_Station'Access,
        -:  984:                        Name => "Test_PrepareTrain_Already_Train_At_Station");
        2:  985:      Register_Routine (Test => T,
        -:  986:                        Routine => Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line'Access,
        -:  987:                        Name => "Test_PrepareTrain_Origin_Station_Destionation_Station_Not_Same_Route_Line");
        2:  988:      Register_Routine (Test => T,
        -:  989:                        Routine => Test_Get_Station_By_Name'Access,
        -:  990:                        Name => "Test_Get_Station_By_Name");
        2:  991:      Register_Routine (Test => T,
        -:  992:                        Routine => Test_Get_Track_By_Name'Access,
        -:  993:                        Name => "Test_Get_Track_By_Name");
        2:  994:      Register_Routine (Test => T,
        -:  995:                        Routine => Test_Go'Access,
        -:  996:                        Name => "Test_Go");
        2:  997:      Register_Routine (Test => T,
        -:  998:                        Routine => Test_Go_Train_Already_On_Track'Access,
        -:  999:                        Name => "Test_Go_Train_Already_On_Track");
        -: 1000:
        -: 1001:
        -: 1002:
        2: 1003:   end Register_Tests;
        -: 1004:
       62: 1005:   function Name (T: TC) return AUnit.Message_String is
        -: 1006:      pragma Unreferenced (T);
        -: 1007:   begin
       62: 1008:      return AUnit.Format ("Tests: Standard Tests");
        -: 1009:   end Name;
        -: 1010:
        2: 1011:end RailSystems.Test;
