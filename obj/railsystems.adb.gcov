        -:    0:Source:C:/Users/JackyChang/Desktop/RailSystem/src/railsystems.adb
        -:    0:Programs:38
        -:    1:with sPrint;
        -:    2:use sPrint;
        -:    3:with Ada.Exceptions;
        -:    4:with Ada.Calendar;
        -:    5:with Ada.Text_IO; use Ada.Text_IO;
        -:    6:use Ada.Calendar; -- for the "-" and "+" operations on Time
        -:    7:
        -:    8:package body RailSystems with SPARK_Mode=>On is
        -:    9:   use all type TYPES.MAX_SIZE;
        -:   10:   use all type TYPES.Station_Locations;
        -:   11:
        -:   12:
        -:   13:
        -:   14:
      134:   15:   procedure Init(r_system: in out RailSystem)
        -:   16:   is
        -:   17:   begin
      134:   18:      RailSystems.LIST_TRAINS.Init(r_system.All_Trains);
      134:   19:      RailSystems.LIST_STATIONS.Init(r_system.All_Stations);
      134:   20:      Stations.LIST_TRACKS.Init(r_system.All_Tracks);
      134:   21:   end Init;
        -:   22:
        -:   23:
        -:   24:   --     procedure InitTrack
        -:   25:   --       (track_r: in out Tracks.Track)
        -:   26:   --     is
        -:   27:   --     begin
        -:   28:   --        track_r.ID:=0;
        -:   29:   --        track_r.Origin:= TYPES.No;
        -:   30:   --        track_r.Destination:=TYPES.No;
        -:   31:   --        track_r.TrainID:=0;
        -:   32:   --     end InitTrack;
        -:   33:
        -:   34:   --------------------
        -:   35:   -- Go (For train) --
        -:   36:   --------------------
       10:   37:   procedure go(r_system: in out RailSystem; train: in out Trains.Train; count: in Positive)
        -:   38:     with SPARK_Mode =>On
        -:   39:   is
        -:   40:      --        Trains: Trains.Train;
       10:   41:      tempTrack: Tracks.Track;
       10:   42:      tempStation: Stations.Station;
        -:   43:      tempStationLocation: TYPES.Station_Locations;
        -:   44:--        Start_Time : Ada.Calendar.Time;
        -:   45:--        Next_Cycle : Ada.Calendar.Time;
        -:   46:--        Period     : constant Duration  := 2.0;
        -:   47:      station_count: Positive;
       10:   48:      Other_Train_On_Track_Exception: Exception;
       10:   49:      Other_Train_At_Station_Exception: Exception;
        -:   50:
        -:   51:   begin
        -:   52:      pragma Warnings(Off, r_system);
        -:   53:
        -:   54:--        Start_Time := Ada.Calendar.Clock;
        -:   55:--        Next_Cycle := Start_Time;
       10:   56:      station_count:=1;
      104:   57:      while station_count< count loop
       96:   58:         Print_Natural("Train ID:  ",train.ID);
       96:   59:         if train.Location.currentLocation = "Station" then
       52:   60:            if train.Location.Station.Location =train.Destination then
       10:   61:               tempStationLocation:= train.Origin;
       10:   62:               train.Origin :=train.Destination;
       10:   63:               train.Destination:= tempStationLocation;
        -:   64:            end if;
       52:   65:            train.Location.currentLocation := "Track  ";
       52:   66:            for i in 1 .. Stations.LIST_TRACKS.GET_SIZE(LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations,train.Location.Station.ID).Outgoing) loop
       92:   67:               tempTrack:= Stations.LIST_TRACKS.GET_ELEMENT(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations,train.Location.Station.ID).Outgoing, i);
       92:   68:               if tempTrack.TracksLineDestination = train.Destination then
       52:   69:                  if getTrackByName(r_system,tempTrack.Origin, tempTrack.Destination).TrainID = 0 then
       50:   70:                     train.Location.Track:= tempTrack;
       50:   71:                     train.Location.Station.ID := 0;
       50:   72:                     train.Location.Station.TrainID:=0;
       50:   73:                     train.State:=TYPES.Move;
       50:   74:                     train.Location.Track.TrainID:=train.ID;
       50:   75:                     tempStation:= getStationByName(r_system,tempTrack.Destination);
       50:   76:                     tempStation.TrainID:=0;
       50:   77:                     replaceStation(r_system,tempStation.ID,tempStation);
       50:   78:                     tempTrack.TrainID:=train.ID;
       50:   79:                     replaceTrack(r_system,tempTrack.ID,tempTrack);
       50:   80:                     replaceTrain(r_system,train.ID,train);
       50:   81:                     Print_Train_State("Train state:  ", train.State);
       50:   82:                     Print("Train current location:  "& train.Location.currentLocation);
       50:   83:                     Print_Natural("Track ID:  ",train.Location.Track.ID);
       50:   84:                     Print_Station_Locations("Track from:", tempTrack.Origin);
       50:   85:                     Print_Station_Locations("Track to:  ", tempTrack.Destination);
       50:   86:                     Print("--------------------------------------------------------");
        -:   87:                  else
        2:   88:                     Print_Natural("GO: Can not move, Other train on the track: ", tempTrack.ID);
        2:   89:                     Print_Natural("GO: Train id on the track: ", getTrackByName(r_system,tempTrack.Origin, tempTrack.Destination).TrainID);
        2:   90:                     Raise Other_Train_On_Track_Exception;
        -:   91:                  end if;
        -:   92:
        -:   93:               end if;
        -:   94:
       90:   95:            end loop;
        -:   96:
       44:   97:         elsif train.Location.currentLocation = "Track  " then
       44:   98:            Print_Natural("5555555;       ",getStationByName(r_system,train.Location.Track.Destination).ID);
       44:   99:            tempStation:=getStationByName(r_system, train.Location.Track.Destination);
       44:  100:            Print_Natural("5555555;       ",getStationByName(r_system,train.Location.Track.Destination).TrainID);
       44:  101:            Print_Station_Locations("5555555;       ",getStationByName(r_system,train.Location.Track.Destination).Location);
       44:  102:            if getStationByName(r_system,tempStation.Location).TrainID = 0 then
       44:  103:               train.Location.currentLocation:= "Station";
       44:  104:               train.Location.Station:= getStationByName(r_system, train.Location.Track.Destination);
       44:  105:               train.State:=TYPES.Stop;
       44:  106:               train.Location.Track.ID:=0;
       44:  107:               train.Location.Track.TrainID:=0;
       44:  108:               train.Location.Station.TrainID:= train.ID;
       44:  109:               tempStation.TrainID:=train.ID;
       44:  110:               replaceStation(r_system,tempStation.ID,tempStation);
       44:  111:               tempTrack:=getTrackByName(r_system,train.Location.Track.Origin, train.Location.Track.Destination);
       44:  112:               tempTrack.TrainID:=0;
       44:  113:               replaceTrack(r_system,tempTrack.ID,tempTrack);
       44:  114:               replaceTrain(r_system,train.ID,train);
       44:  115:               Print_Train_State("Train state:  ", train.State);
       44:  116:               Print_Natural("current location station id:  ", train.Location.Station.ID);
       44:  117:               Print_Station_Locations("current location station:  ", train.Location.Station.Location);
        -:  118:
       44:  119:               Print("--------------------------------------------------------");
        -:  120:            else
    #####:  121:               Print_Natural("GO: Can not stop, other train at station", tempStation.ID);
    #####:  122:               Print_Natural("GO: Train id at the station: ", tempStation.TrainID);
    #####:  123:               Raise Other_Train_At_Station_Exception;
        -:  124:            end if;
        -:  125:
        -:  126:         end if;
        -:  127:
        -:  128:
        -:  129:
        -:  130:--           Next_Cycle := Next_Cycle + Period;
       94:  131:         station_count:=station_count+1;
       94:  132:      end loop;
        -:  133:
        -:  134:
       10:  135:   end go;
        -:  136:
        -:  137:   --------------------------------------------
        -:  138:   -- replace Train ----------------------------
        -:  139:   --------------------------------------------
      108:  140:   procedure replaceTrain(r_system: in out RailSystem;
        -:  141:                          TrainID: in Natural;
        -:  142:                          train: in Trains.Train)
        -:  143:   is
        -:  144:   begin
      108:  145:      LIST_TRAINS.REPLACE_BY_ID(r_system.All_Trains,TrainID,train);
      108:  146:   end replaceTrain;
        -:  147:
        -:  148:   --------------------
        -:  149:   -- Prepare Train --
        -:  150:   --------------------
       24:  151:   procedure prepareTrain(r_system: in out RailSystem;
        -:  152:                          train: in out Trains.Train;
        -:  153:                          Origin: in TYPES.Station_Locations;
        -:  154:                          Destination: in TYPES.Station_Locations;
        -:  155:                          StartTime: in TYPES.TimeTable)
        -:  156:
        -:  157:   is
       24:  158:      Origin_Should_Not_Equals_No: Exception;
       24:  159:      Destination_Should_Not_Equals_No: Exception;
       24:  160:      Already_Train_At_Station: Exception;
       24:  161:      Origin_Should_Not_Equals_Destination: Exception;
       24:  162:      Origin_Station_Destination_Station_Not_Same_Route_Line: Exception;
       24:  163:      Train_Already_Runing_Exception: Exception;
       24:  164:      tempOriginStation: Stations.Station;
       24:  165:      tempDestinationStation: Stations.Station;
       24:  166:      od_record: TYPES.ODRecord;
        -:  167:      --        state: TYPES.Train_State;
        -:  168:      check1: Boolean;
        -:  169:--        check2: Boolean;
        -:  170:   begin
        -:  171:      --        state:=train.State;
        -:  172:      --        if  TYPES.Move  state or state = TYPES.Stop or state =  TYPES.Open then
        -:  173:      --           Print_Natural("PREPARE TRAIN: Train already runing in the railway system Choose other train to prepare. Train ID: ",train.ID);
        -:  174:      --           raise Train_Already_Runing_Exception;
        -:  175:      --        end if;
        -:  176:
       24:  177:      if Destination = TYPES.No then
        2:  178:         Print("PREPARE TRAIN: Destination should not be TYPES.No");
        2:  179:         raise Destination_Should_Not_Equals_No;
        -:  180:      end if;
        -:  181:
       22:  182:      if Origin = TYPES.No then
        2:  183:         Print("PREPARE TRAIN: Origin should not be TYPES.No");
        2:  184:         raise Origin_Should_Not_Equals_No;
        -:  185:      end if;
        -:  186:
        -:  187:
       20:  188:      if Origin = Destination then
        2:  189:         Print("PREPARE TRAIN:  Origin can not equals Destination");
        2:  190:         raise Origin_Should_Not_Equals_Destination;
        -:  191:      end if;
        -:  192:
       18:  193:      train.Location.Station:= getStationByName(r_system, Origin);
       18:  194:      if train.Location.Station.TrainID /=0 then
        2:  195:         Print("PREPARE TRAIN: Already train at station");
        2:  196:         raise Already_Train_At_Station;
        -:  197:      end if;
        -:  198:
       16:  199:      tempOriginStation:=getStationByName(r_system,Origin);
        -:  200:--        tempDestinationStation:=getStationByName(r_system,Destination);
        -:  201:
       16:  202:      check1:=False;
       16:  203:      for i in 1..TYPES.LIST_OD.GET_SIZE(tempOriginStation.TracksLineOriginAndDestination) loop
       22:  204:         od_record:=TYPES.LIST_OD.GET_ELEMENT(tempOriginStation.TracksLineOriginAndDestination, i);
       22:  205:         if od_record.Origin = Origin or od_record.Origin = Destination then
       22:  206:            if od_record.Destination = Origin or od_record.Destination = Destination then
       14:  207:               check1:=True;
        -:  208:            end if;
        -:  209:         end if;
       22:  210:      end loop;
        -:  211:
        -:  212:--        check2:=False;
        -:  213:--        for i in 1..TYPES.LIST_OD.GET_SIZE(tempDestinationStation.TracksLineOriginAndDestination) loop
        -:  214:--           od_record:=TYPES.LIST_OD.GET_ELEMENT(tempDestinationStation.TracksLineOriginAndDestination, i);
        -:  215:--           if od_record.Origin = Origin or od_record.Destination = Origin then
        -:  216:--              if od_record.Origin = Destination or od_record.Destination = Destination then
        -:  217:--                 check2:=True;
        -:  218:--              end if;
        -:  219:--           end if;
        -:  220:--        end loop;
       16:  221:      if check1 = True  then
        -:  222:
       14:  223:         train.Location.Station.TrainID:= train.ID;
       14:  224:         train.Origin := Origin;
        -:  225:
       14:  226:         train.Destination := Destination;
       14:  227:         train.State:=TYPES.Open;
       14:  228:         train.Start_Run_Time:=StartTime;
       14:  229:         train.Location.currentLocation:="Station";
       14:  230:         train.Location.Station := getStationByName(r_system, Origin);
       14:  231:         train.Location.Track.TrainID :=0;
       14:  232:         tempOriginStation.TrainID:= train.ID;
       14:  233:         replaceStation(r_system,tempOriginStation.ID, tempOriginStation);
       14:  234:         replaceTrain(r_system => r_system,
        -:  235:                      TrainID  => train.ID,
        -:  236:                      train    => train);
        -:  237:
        -:  238:      else
        2:  239:         Print("PREPARE TRAIN: Origin station and Destination station not at the same route line");
        2:  240:         Raise Origin_Station_Destination_Station_Not_Same_Route_Line;
        -:  241:      end if;
       14:  242:   end prepareTrain;
        -:  243:
        -:  244:
        -:  245:   --------------------
        -:  246:   -- update Train --
        -:  247:   --------------------
        -:  248:--     procedure updateTrain(r_system: in RailSystem;
        -:  249:--                           train: in out Trains.Train)
        -:  250:--
        -:  251:--     is
        -:  252:--        pragma Warnings(Off, r_system);
        -:  253:--
        -:  254:--
        -:  255:--     begin
        -:  256:--        null;
        -:  257:--     end updateTrain;
        -:  258:   ---------------------------------
        -:  259:   -- get station by station name --
        -:  260:   ---------------------------------
        -:  261:
      368:  262:   function getStationByName(r_system: in RailSystem;
        -:  263:                             stationLocation: in TYPES.Station_Locations)
        -:  264:                             return Stations.Station
        -:  265:   is
      368:  266:      temp: Stations.Station;
        -:  267:      --        l: Stations.LIST_TRACKS.LIST_PTR(MAX_SIZE =>100);
        -:  268:      --        inTracks:Stations.LIST_TRACKS.LIST_PTR(MAX_SIZE =>100);
        -:  269:      --        outTracks: Stations.LIST_TRACKS.LIST_PTR(MAX_SIZE =>100);
        -:  270:   begin
        -:  271:      --        Stations.Init(temp);
        -:  272:      pragma Warnings(Off, temp);
        -:  273:      --        Stations.LIST_TRACKS.Init(inTracks);
        -:  274:      --        Stations.LIST_TRACKS.Init(outTracks);
      368:  275:      for i in 1 .. RailSystems.LIST_STATIONS.GET_SIZE(r_system.All_Stations) loop
        -:  276:
     1974:  277:         if RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations, i).Location = stationLocation then
      366:  278:            return RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations, i);
        -:  279:         end if;
     1608:  280:      end loop;
        2:  281:      return temp;
      368:  282:   end getStationByName;
        -:  283:
        -:  284:   ---------------------------------
        -:  285:   -- get track by station name --
        -:  286:   ---------------------------------
        -:  287:
      102:  288:   function getTrackByName(r_system: in RailSystem;
        -:  289:                           Origin: in TYPES.Station_Locations;
        -:  290:                           Destination: in TYPES.Station_Locations)
        -:  291:                           return Tracks.Track
        -:  292:   is
      102:  293:      temp: Tracks.Track;
        -:  294:   begin
        -:  295:      --        InitTrack(temp);
      102:  296:      temp.ID:=0;
      102:  297:      temp.Origin:= TYPES.No;
      102:  298:      temp.Destination:=TYPES.No;
      102:  299:      temp.TrainID:=0;
      102:  300:      for i in 1 .. Stations.LIST_TRACKS.GET_SIZE(r_system.All_Tracks) loop
      806:  301:         if Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, i).Origin = Origin
      806:  302:         and Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks,i).Destination = Destination then
      100:  303:            return Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, i);
        -:  304:         end if;
      706:  305:      end loop;
        2:  306:      return temp;
      102:  307:   end getTrackByName;
        -:  308:
        -:  309:
        -:  310:   --------------
        -:  311:   -- addTrack --
        -:  312:   --------------
        -:  313:
      222:  314:   procedure addTrack(r_system: in out RailSystem;
        -:  315:                      ID: in Natural;
        -:  316:                      Origin: in TYPES.Station_Locations;
        -:  317:                      Destination: in TYPES.Station_Locations;
        -:  318:                      LineOrigin: in TYPES.Station_Locations;
        -:  319:                      LineDestination: in TYPES.Station_Locations)
        -:  320:   is
      222:  321:      track: Tracks.Track;
        -:  322:--        OriginExist: Boolean;
        -:  323:--        DestinationExist: Boolean;
        -:  324:      sizeTracks: Natural;
      222:  325:      Origin_equal_Destination_Exception : Exception;
      222:  326:      Track_Already_Add_Exception: Exception;
      222:  327:      ID_Out_Of_Range_Exception: Exception;
      222:  328:      Origin_Not_Exist_Exception: Exception;
      222:  329:      Destination_Not_Exist_Exception: Exception;
      222:  330:      Origin_Destination_Not_Station_Location_Exception: Exception;
      222:  331:      Track_Already_Used_Exception: Exception;
      222:  332:      Tracks_Line_Origin_Destination_Equal_Exception: Exception;
        -:  333:
        -:  334:   begin
      222:  335:      Print_Natural("id: ", ID);
      222:  336:      if ID <1 or ID>100 then
        4:  337:         Print("ADD TRACK: ID should between 1 and Max_Size");
        4:  338:         Raise ID_Out_Of_Range_Exception;
        -:  339:      end if;
      218:  340:      sizeTracks:= Stations.LIST_TRACKS.GET_SIZE(r_system.All_Tracks);
      218:  341:      if sizeTracks > 0 then
      184:  342:         for j in 1 ..sizeTracks loop
     1064:  343:            track:= Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, j);
     1064:  344:            if track.Origin = Origin and track.Destination = Destination then
        2:  345:               print("ADD TRACK: track already exist");
        2:  346:               Raise Track_Already_Add_Exception;
        -:  347:            end if;
     1062:  348:         end loop;
        -:  349:         --        else
        -:  350:         --           print("ADD TRACK: tracks size = 0 (add first track)");
        -:  351:      end if;
        -:  352:
        -:  353:
      216:  354:      if Origin = TYPES.No or Destination = TYPES.No or LineOrigin = TYPES.No or LineDestination = TYPES.No then
        2:  355:         Print("Origin or Destination has to be a Station location");
        2:  356:         Raise Origin_Destination_Not_Station_Location_Exception;
        -:  357:      end if;
        -:  358:
      214:  359:      if Origin = Destination then
        2:  360:         Print("ADD TRACK: track Origin should not equals Destination");
        2:  361:         Raise Origin_equal_Destination_Exception;
        -:  362:      end if;
        -:  363:
      212:  364:      if LineDestination = LineOrigin then
        2:  365:         Print("ADD TRACK: Tracks line origin should not equals tracks line destination");
        2:  366:         Raise Tracks_Line_Origin_Destination_Equal_Exception;
        -:  367:      end if;
        -:  368:
      210:  369:      if Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, ID).id >= 1 then
        2:  370:         Print("ADD TRACK: track ID already used");
        2:  371:         Raise Track_Already_Used_Exception;
        -:  372:      end if;
        -:  373:
        -:  374:
        -:  375:--        OriginExist := false;
        -:  376:--        DestinationExist := false;
        -:  377:--        for location in TYPES.No .. TYPES.Johnsonville loop
        -:  378:--           if location = Origin then
        -:  379:--              OriginExist := True;
        -:  380:--           end if;
        -:  381:--           if location = Destination then
        -:  382:--              DestinationExist := true;
        -:  383:--           end if;
        -:  384:--
        -:  385:--        end loop;
        -:  386:--        if OriginExist = false then
        -:  387:--           Print("ADD TRACK: Origin Not Exist Exception");
        -:  388:--           Raise Origin_Not_Exist_Exception;
        -:  389:--        end if;
        -:  390:--        if DestinationExist = false then
        -:  391:--           Print("ADD TRACK: Destination Not Exist Exception");
        -:  392:--           Raise Destination_Not_Exist_Exception;
        -:  393:--        end if;
        -:  394:
      208:  395:      track.ID:=ID;
      208:  396:      track.Origin:= Origin;
      208:  397:      track.Destination:= Destination;
      208:  398:      track.TracksLineOrigin:= LineOrigin;
      208:  399:      track.TracksLineDestination:=LineDestination;
      208:  400:      Stations.LIST_TRACKS.APPEND(r_system.All_Tracks,track, ID);
      208:  401:   end addTrack;
        -:  402:
        -:  403:   --------------
        -:  404:   -- addTrain --
        -:  405:   --------------
        -:  406:
       46:  407:   procedure addTrain (r_system: in out RailSystem;
        -:  408:                       ID: in Natural)
        -:  409:   is
       46:  410:      train: Trains.Train;
       46:  411:      ID_Out_Of_Range_Exception: Exception;
        -:  412:
        -:  413:   begin
       46:  414:      if ID <1 or ID>100 then
        4:  415:         Print("ADD TRAIN: ID should between 1 and 100");
        4:  416:         Raise ID_Out_Of_Range_Exception;
        -:  417:      end if;
       42:  418:      train.ID := ID;
       42:  419:      LIST_TRAINS.APPEND(r_system.All_Trains, train,ID);
       42:  420:   end addTrain;
        -:  421:
        -:  422:   ---------------------
        -:  423:   -- get train by id --
        -:  424:   ---------------------
       36:  425:   function getTrainById(r_system: in RailSystem; ID: in Natural)
        -:  426:                         return Trains.Train
        -:  427:   is
       36:  428:      Get_Train_By_ID_ID_Out_Of_Range_Exception: Exception;
       36:  429:      train: Trains.train;
        -:  430:   begin
       36:  431:      if ID < 1 or ID > RailSystems.LIST_TRAINS.GET_SIZE(r_system.All_Trains) then
        4:  432:         Print("GET TRAIN BY ID: id out of range");
        4:  433:         Raise Get_Train_By_ID_ID_Out_Of_Range_Exception;
        -:  434:      end if;
        -:  435:
       32:  436:      train:= RailSystems.LIST_TRAINS.GET_ELEMENT_BY_ID(r_system.All_Trains, ID);
       64:  437:      return train;
       36:  438:   end getTrainById;
        -:  439:
        -:  440:   ----------------
        -:  441:   -- addStation --
        -:  442:   ----------------
        -:  443:
      136:  444:   procedure addStation
        -:  445:     (r_system: in out RailSystem;
        -:  446:      StationID: in Natural;
        -:  447:      Location: in TYPES.Station_Locations)
        -:  448:   is
      136:  449:      station_t: Stations.Station;
      136:  450:      tempStation: Stations.Station;
        -:  451:      --        LocationExist: Boolean;
      136:  452:      tempStation2: Stations.Station;
      136:  453:      Station_Already_Exist_Exception: Exception;
        -:  454:--        Location_Not_Exist_Exception: Exception;
      136:  455:      Station_ID_Already_Exist_Exception: Exception;
      136:  456:      Add_Station_ID_Out_Of_Range_Exception: Exception;
        -:  457:   begin
        -:  458:      --        Stations.Init(station_t);
        -:  459:      --        LocationExist := False;
        -:  460:      --        for l in TYPES.No .. TYPES.Johnsonville loop
        -:  461:      --           if l = Location then
        -:  462:      --              LocationExist := True;
        -:  463:      --           end if;
        -:  464:      --        end loop;
        -:  465:      --        if LocationExist = false then
        -:  466:      --           Print("ADD STATION: Station Location Not Exist Exception");
        -:  467:      --           Raise Location_Not_Exist_Exception;
        -:  468:      --        end if;
        -:  469:
      136:  470:      if StationID < 1 or StationID > 100 then
        4:  471:         Print("ADD STATION: id out of range");
        4:  472:         Raise Add_Station_ID_Out_Of_Range_Exception;
        -:  473:      end if;
      132:  474:      tempStation2:= LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations, StationID);
      132:  475:      if tempStation2.ID /= 0 then
        2:  476:         Print("ADD STATION: station id already exist");
        2:  477:         Raise Station_ID_Already_Exist_Exception;
        -:  478:      end if;
        -:  479:
      130:  480:      for i in 1 .. LIST_STATIONS.GET_SIZE(r_system.All_Stations) loop
      342:  481:         tempStation:= LIST_STATIONS.GET_ELEMENT(r_system.All_Stations,i);
      342:  482:         if tempStation.Location = Location then
        2:  483:            Print("ADD STATION: station already exist");
        2:  484:            Raise Station_Already_Exist_Exception;
        -:  485:         end if;
      340:  486:      end loop;
        -:  487:
        -:  488:
        -:  489:
        -:  490:
      128:  491:   station_t.ID := StationID;
      128:  492:   station_t.Location := Location;
      128:  493:   LIST_STATIONS.APPEND(r_system.All_Stations, station_t,StationID);
        -:  494:
      128:  495:   end addStation;
        -:  496:
        -:  497:
        -:  498:   --------------------------------
        -:  499:   -- set Train current Location --
        -:  500:   --------------------------------
        -:  501:
       42:  502:   procedure setTrainLocation(r_system: in RailSystem;
        -:  503:                              train: in out Trains.Train;
        -:  504:                              LocationName: in  String;
        -:  505:                              LocationID: in Natural)
        -:  506:   is
       42:  507:      Location_Name_Exception: Exception;
       42:  508:      Station_Not_Exist_Exception: Exception;
       42:  509:      Track_Not_Exist_Exception: Exception;
       42:  510:      Train_Already_On_Track_Exception: Exception;
       42:  511:      Train_Already_On_Station_Exception: Exception;
       42:  512:      Set_Train_Location_LocationID_Out_Of_Range_Exception: Exception;
       42:  513:      tempStation: Stations.Station;
       42:  514:      tempTrack: Tracks.Track;
       42:  515:      Location: Trains.Train_Location;
        -:  516:   begin
       42:  517:      tempTrack.TrainID:=0;
        -:  518:
        -:  519:      --        Stations.Init(tempStation);
       42:  520:      tempStation.ID:=0;
       42:  521:      tempStation.TrainID:=0;
       42:  522:      tempStation.Location:=TYPES.No;
       42:  523:       if LocationID < 1 or LocationID > LIST_TRAINS.GET_SIZE(r_system.All_Trains) then
        4:  524:         Print("SET TRAIN LOCATION: id out of range");
        4:  525:         Raise Set_Train_Location_LocationID_Out_Of_Range_Exception;
        -:  526:      end if;
        -:  527:
        -:  528:--        if LocationName = "Track" then
        -:  529:--           tempTrack:= Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, LocationID);
        -:  530:--           if tempTrack.TrainID /=0 then
        -:  531:--              Print("SET TRAIN LOCATION: there is a train already on the track");
        -:  532:--              Raise Train_Already_On_Track_Exception;
        -:  533:--           elsif tempTrack.ID /= 0 then
        -:  534:--              Location.Track := tempTrack;
        -:  535:--              Location.Station := tempStation;
        -:  536:--              Location.currentLocation:= "Track  ";
        -:  537:--              train.Location := Location;
        -:  538:--           else
        -:  539:--              Print("SET TRAIN LOCATION: track not exist");
        -:  540:--              Raise Track_Not_Exist_Exception;
        -:  541:--           end if;
        -:  542:--
        -:  543:--        elsif LocationName = "Station" then
        -:  544:--           tempStation:= LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations, LocationID);
        -:  545:--           if tempStation.TrainID /= 0 then
        -:  546:--              Print("SET TRAIN LOCATION: there is a train already on the station");
        -:  547:--              Raise Train_Already_On_Station_Exception;
        -:  548:--           elsif tempStation.ID /= 0 then
        -:  549:--              Location.Station := tempStation;
        -:  550:--              Location.Track := tempTrack;
        -:  551:--              Location.currentLocation:= "Station";
        -:  552:--              train.Location := Location;
        -:  553:--           else
        -:  554:--              Print("SET TRAIN LOCATION: station not exist");
        -:  555:--              Raise Station_Not_Exist_Exception;
        -:  556:--           end if;
        -:  557:
       38:  558:      if LocationName = "None" then
       36:  559:         Location.Station := tempStation;
       36:  560:         Location.Track := tempTrack;
       36:  561:         Location.currentLocation:= "None   ";
       36:  562:         train.Location:= Location;
        -:  563:      else
        2:  564:         Print("SET TRAIN LOCATION: location name should be None");
        2:  565:         Raise Location_Name_Exception;
        -:  566:      end if;
        -:  567:
        -:  568:
        -:  569:
       72:  570:   end setTrainLocation;
        -:  571:
        -:  572:   --------------------------------------------
        -:  573:   -- replace Track ---------------------------
        -:  574:   --------------------------------------------
       94:  575:   procedure replaceTrack(r_system: in out RailSystem;
        -:  576:                            TrackID: in Natural;
        -:  577:                            track: in Tracks.Track)
        -:  578:   is
        -:  579:   begin
       94:  580:      Stations.LIST_TRACKS.REPLACE_BY_ID(r_system.All_Tracks,TrackID,track);
       94:  581:   end replaceTrack;
        -:  582:
        -:  583:   --------------------------------------------
        -:  584:   -- replace Station -------------------------
        -:  585:   --------------------------------------------
      230:  586:   procedure replaceStation(r_system: in out RailSystem;
        -:  587:                            StationID: in Natural;
        -:  588:                            station: in Stations.Station)
        -:  589:   is
        -:  590:   begin
      230:  591:      LIST_STATIONS.REPLACE_BY_ID(r_system.All_Stations,StationID,station);
      230:  592:   end replaceStation;
        -:  593:
        -:  594:
        -:  595:   -----------------------------------------
        -:  596:   -- addIncomingOutgoingTracksForStation --
        -:  597:   -----------------------------------------
       20:  598:   procedure addIncomingOutgoingTracksForEachStation(r_system: in out RailSystem)
        -:  599:   is
       20:  600:      tempStation: Stations.Station;
       20:  601:      tempTrack: Tracks.Track;
       20:  602:      od_record: TYPES.ODRecord;
        -:  603:      size: Natural;
        -:  604:      found: Boolean;
       20:  605:      NotFindTrackIdException : Exception;
       20:  606:      AlreadyAddTrackException : Exception;
       20:  607:      StationIDNotExistException: Exception;
        -:  608:
        -:  609:   begin
        -:  610:
       20:  611:      for i in 1 .. LIST_STATIONS.GET_SIZE(r_system.All_Stations) loop
      120:  612:         tempStation:= LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations, i);
        -:  613:
      120:  614:         for j in 1 ..Stations.LIST_TRACKS.GET_SIZE(r_system.All_Tracks) loop
     1360:  615:            tempTrack:= Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, j);
     1360:  616:            if tempTrack.Origin = tempStation.Location then
      200:  617:               if Stations.LIST_TRACKS.CONTAINS(tempStation.Outgoing, tempTrack) = False then
        -:  618:
      200:  619:                  Stations.LIST_TRACKS.APPEND(tempStation.Outgoing, tempTrack, tempTrack.ID);
      200:  620:                  od_record.Origin:= tempTrack.TracksLineOrigin;
      200:  621:                  od_record.Destination:=TempTrack.TracksLineDestination;
      200:  622:                  size:=TYPES.LIST_OD.GET_SIZE(tempStation.TracksLineOriginAndDestination);
      200:  623:                  if size<1 then
      120:  624:                     TYPES.LIST_OD.APPEND(tempStation.TracksLineOriginAndDestination, od_record,1);
        -:  625:                  elsif size>0 then
       80:  626:                     found:=False;
       80:  627:                     for w in 1 .. size loop
       80:  628:                        if (TYPES.LIST_OD.GET_ELEMENT(tempStation.TracksLineOriginAndDestination,w).Origin = od_record.Origin
       80:  629:                            and  TYPES.LIST_OD.GET_ELEMENT(tempStation.TracksLineOriginAndDestination,w).Destination = od_record.Destination)
      160:  630:                          or (TYPES.LIST_OD.GET_ELEMENT(tempStation.TracksLineOriginAndDestination,w).Origin = od_record.Destination
       80:  631:                              and  TYPES.LIST_OD.GET_ELEMENT(tempStation.TracksLineOriginAndDestination,w).Destination = od_record.Origin) then
       70:  632:                           found:=True;
        -:  633:                        end if;
       80:  634:                     end loop;
       80:  635:                     if found = False then
       10:  636:                        TYPES.LIST_OD.APPEND(tempStation.TracksLineOriginAndDestination, od_record,1);
        -:  637:                     end if;
        -:  638:                  end if;
        -:  639:               end if;
     1160:  640:            elsif tempTrack.Destination = tempStation.Location then
      200:  641:               if Stations.LIST_TRACKS.CONTAINS(tempStation.Incoming, tempTrack) = False then
      200:  642:                  Stations.LIST_TRACKS.APPEND(tempStation.Incoming, tempTrack, tempTrack.ID);
        -:  643:               end if;
        -:  644:            end if;
     1360:  645:         end loop;
      120:  646:         replaceStation(r_system,tempStation.ID,tempStation);
      120:  647:      end loop;
       20:  648:   end addIncomingOutgoingTracksForEachStation;
        -:  649:
        -:  650:end RailSystems;
