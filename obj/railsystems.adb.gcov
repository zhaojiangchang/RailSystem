        -:    0:Source:C:/Users/JackyChang/Desktop/tutorial/RailSystem/src/railsystems.adb
        -:    0:Programs:38
        -:    1:with sPrint;
        -:    2:use sPrint;
        -:    3:with Ada.Exceptions;
        -:    4:with Ada.Calendar;
        -:    5:with Ada.Text_IO; use Ada.Text_IO;
        -:    6:use Ada.Calendar; -- for the "-" and "+" operations on Time
        -:    7:
        -:    8:package body RailSystems with SPARK_Mode=>On is
        -:    9:   use all type TYPES.MAX_SIZE;
        -:   10:   use all type TYPES.Station_Locations;
        -:   11:
      126:   12:   procedure Init(r_system: in out RailSystem)
        -:   13:   is
        -:   14:   begin
      126:   15:      RailSystems.LIST_TRAINS.Init(r_system.All_Trains);
      126:   16:      RailSystems.LIST_STATIONS.Init(r_system.All_Stations);
      126:   17:      Stations.LIST_TRACKS.Init(r_system.All_Tracks);
      126:   18:   end Init;
        -:   19:
        -:   20:   --------------------
        -:   21:   -- Go (For train) --
        -:   22:   --------------------
        6:   23:   procedure go(r_system: in out RailSystem; train: in out Trains.Train; count: in Positive)
        -:   24:   is
        -:   25:      --        Trains: Trains.Train;
        4:   26:      track: Tracks.Track;
        4:   27:      station: Stations.Station;
        -:   28:      tempStationLocation: TYPES.Station_Locations;
        -:   29:      size: Natural;
        -:   30:      station_count: Natural;
        -:   31:   begin
        -:   32:      pragma Warnings(Off, r_system);
        4:   33:      station_count:=1;
        -:   34:
       40:   35:      while station_count< count loop
       36:   36:         if train.Location.currentLocation = "Station" then
       20:   37:            if train.Location.Station.Location =train.Destination then
        4:   38:               tempStationLocation:= train.Origin;
        4:   39:               train.Origin :=train.Destination;
        4:   40:               train.Destination:= tempStationLocation;
        -:   41:            end if;
       20:   42:            if train.Location.Station.ID /=0 then
       20:   43:               size:=Stations.LIST_TRACKS.GET_SIZE(LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations,train.Location.Station.ID).Outgoing);
       20:   44:               for i in 1 .. size loop
       36:   45:                  if train.Location.Station.ID /=0 then
       24:   46:                     track:= Stations.LIST_TRACKS.GET_ELEMENT(RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations,train.Location.Station.ID).Outgoing, i);
       24:   47:                     if track.TracksLineDestination = train.Destination  then
       20:   48:                        if track.Origin/=TYPES.No and track.Destination/=TYPES.No then
       20:   49:                           if getTrackByName(r_system,track.Origin, track.Destination).TrainID = 0 then
       20:   50:                              train.Location.currentLocation := "Track  ";
       20:   51:                              train.Location.Track:= track;
       20:   52:                              train.Location.Station.ID := 0;
       20:   53:                              train.Location.Station.TrainID:=0;
       20:   54:                              train.State:=TYPES.Move;
       20:   55:                              train.Location.Track.TrainID:=train.ID;
       20:   56:                              station:= getStationByName(r_system,track.Destination);
       20:   57:                              station.TrainID:=0;
       20:   58:                              if station.ID >0 and station.ID<101 and station.Location /=TYPES.No then
       20:   59:                                 replaceStation(r_system,station);
        -:   60:                              end if;
        -:   61:
       20:   62:                              track.TrainID:=train.ID;
       20:   63:                              if track.ID >0 and track.ID<101 then
       20:   64:                                 replaceTrack(r_system,track);
        -:   65:                              end if;
       20:   66:                              if train.ID>0 and train.ID<101 then
       20:   67:                                 replaceTrain(r_system,train);
        -:   68:                              end if;
       20:   69:                              Print_Natural("Train ID:  ", train.ID);
       20:   70:                              Print_Train_State("Train state:  ", train.State);
       20:   71:                              Print("Train current location:  "& train.Location.currentLocation);
       20:   72:                              Print_Natural("Track ID:  ",train.Location.Track.ID);
       20:   73:                              Print_Station_Locations("Track from:", track.Origin);
       20:   74:                              Print_Station_Locations("Track to:  ", track.Destination);
       20:   75:                              Print("--------------------------------------------------------");
        -:   76:--                             else
        -:   77:--                                Print_Natural("GO: Can not move, Other train on the track: ", track.ID);
        -:   78:
        -:   79:                           end if;
        -:   80:
        -:   81:                        end if;
        -:   82:                     end if;
        -:   83:                  end if;
       36:   84:               end loop;
        -:   85:            end if;
        -:   86:
       16:   87:         elsif train.Location.currentLocation = "Track  " then
       16:   88:            if train.Location.Track.Destination /= TYPES.No then
       16:   89:               station:=getStationByName(r_system, train.Location.Track.Destination);
        -:   90:            end if;
       16:   91:            if station.Location /=TYPES.No then
       16:   92:               if getStationByName(r_system,station.Location).TrainID = 0 then
       16:   93:                  if train.Location.Track.Destination /= TYPES.No then
       16:   94:                     train.Location.Station:= getStationByName(r_system, train.Location.Track.Destination);
        -:   95:                  end if;
       16:   96:                  train.Location.currentLocation:= "Station";
       16:   97:                  train.State:=TYPES.Stop;
       16:   98:                  train.Location.Track.ID:=0;
       16:   99:                  train.Location.Track.TrainID:=0;
       16:  100:                  train.Location.Station.TrainID:= train.ID;
       16:  101:                  station.TrainID:=train.ID;
        -:  102:
       16:  103:                  if station.ID >0 and station.ID<101 and station.Location /= TYPES.No then
       16:  104:                     replaceStation(r_system,station);
        -:  105:                  end if;
       16:  106:                  if train.Location.Track.Origin /= TYPES.No and train.Location.Track.Destination /= TYPES.No then
       16:  107:                     track:=getTrackByName(r_system,train.Location.Track.Origin, train.Location.Track.Destination);
        -:  108:                  end if;
        -:  109:
       16:  110:                  track.TrainID:=0;
       16:  111:                  if track.ID >0 and track.ID<101 then
       16:  112:                     replaceTrack(r_system,track);
        -:  113:                  end if;
       16:  114:                  if train.ID>0 and train.ID<101 then
       16:  115:                     replaceTrain(r_system,train);
        -:  116:                  end if;
       16:  117:                  Print_Natural("Train state:  ", train.ID);
        -:  118:
       16:  119:                  Print_Train_State("Train state:  ", train.State);
       16:  120:                  Print_Natural("current location station id:  ", train.Location.Station.ID);
       16:  121:                  Print_Station_Locations("current location station:  ", train.Location.Station.Location);
        -:  122:
       16:  123:                  Print("--------------------------------------------------------");
        -:  124:--                 else
        -:  125:--                    Print_Natural("GO: Can not stop, other train at station", station.ID);
        -:  126:--                    Print_Natural("GO: Train id at the station: ", station.TrainID);
        -:  127:
        -:  128:               end if;
        -:  129:            end if;
        -:  130:
        -:  131:         end if;
        -:  132:
       36:  133:         station_count:=station_count+1;
       36:  134:      end loop;
        -:  135:
        -:  136:
        6:  137:   end go;
        -:  138:
        -:  139:
        -:  140:
        -:  141:   --------------------
        -:  142:   -- Prepare Train --
        -:  143:   --------------------
       34:  144:   procedure prepareTrain(r_system: in out RailSystem;
        -:  145:                          train: in out Trains.Train;
        -:  146:                          Origin: in TYPES.Station_Locations;
        -:  147:                          Destination: in TYPES.Station_Locations;
        -:  148:                          StartTime: in TYPES.TimeTable)
        -:  149:
        -:  150:   is
        -:  151:
        8:  152:      tempOriginStation: Stations.Station;
        -:  153:
        -:  154:   begin
        -:  155:
        8:  156:      train.Origin := Origin;
        -:  157:
        8:  158:      train.Destination := Destination;
        8:  159:      train.State:=TYPES.Open;
        8:  160:      train.Start_Run_Time:=StartTime;
        8:  161:      train.Location.currentLocation:="Station";
        8:  162:      train.Location.Station := getStationByName(r_system, Origin);
        8:  163:      train.Location.Station.TrainID:= train.ID;
        8:  164:      train.Location.Track.TrainID :=0;
        8:  165:      tempOriginStation:= getStationByName(r_system        => r_system,
        -:  166:                                           stationLocation => Origin);
        8:  167:        tempOriginStation.TrainID:= train.ID;
        8:  168:      if tempOriginStation.ID>0 and tempOriginStation.ID<101 and tempOriginStation.Location /= TYPES.No then
        8:  169:         replaceStation(r_system, tempOriginStation);
        -:  170:      end if;
        8:  171:      if train.ID>0 and train.ID<101 then
        8:  172:            replaceTrain(r_system => r_system,
        -:  173:                         train    => train);
        -:  174:         end if;
        -:  175:--        end if;
        -:  176:
        8:  177:   end prepareTrain;
        -:  178:
        -:  179:   ---------------------------------
        -:  180:   -- get station by station name --
        -:  181:   ---------------------------------
        -:  182:
      188:  183:   function getStationByName(r_system: in RailSystem;
        -:  184:                             stationLocation: in TYPES.Station_Locations)
        -:  185:                             return Stations.Station
        -:  186:   is
      188:  187:      temp: Stations.Station;
        -:  188:
        -:  189:   begin
        -:  190:      pragma Warnings(Off, temp);
      188:  191:      if stationLocation /=TYPES.No then
      182:  192:         for i in 1 .. RailSystems.LIST_STATIONS.GET_SIZE(r_system.All_Stations) loop
      548:  193:            if RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations, i).Location = stationLocation then
      182:  194:               return RailSystems.LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations, i);
        -:  195:            end if;
      366:  196:         end loop;
        -:  197:      end  if;
        6:  198:      return temp;
      188:  199:   end getStationByName;
        -:  200:
        -:  201:   ---------------------------------
        -:  202:   -- get track by station name --
        -:  203:   ---------------------------------
        -:  204:
       46:  205:   function getTrackByName(r_system: in RailSystem;
        -:  206:                           Origin: in TYPES.Station_Locations;
        -:  207:                           Destination: in TYPES.Station_Locations)
        -:  208:                           return Tracks.Track
        -:  209:   is
       46:  210:      temp: Tracks.Track;
        -:  211:   begin
        -:  212:      --        InitTrack(temp);
       46:  213:      temp.ID:=0;
       46:  214:      temp.Origin:= TYPES.No;
       46:  215:      temp.Destination:=TYPES.No;
       46:  216:      temp.TrainID:=0;
       46:  217:      for i in 1 .. Stations.LIST_TRACKS.GET_SIZE(r_system.All_Tracks) loop
      280:  218:         if Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, i).Origin = Origin
      280:  219:           and Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks,i).Destination = Destination then
       44:  220:            return Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, i);
        -:  221:         end if;
      236:  222:      end loop;
        2:  223:      return temp;
       46:  224:   end getTrackByName;
        -:  225:
        -:  226:
        -:  227:   --------------
        -:  228:   -- addTrack --
        -:  229:   --------------
        -:  230:
      194:  231:   procedure addTrack(r_system: in out RailSystem;
        -:  232:                      ID: in Natural;
        -:  233:                      Origin: in TYPES.Station_Locations;
        -:  234:                      Destination: in TYPES.Station_Locations;
        -:  235:                      LineOrigin: in TYPES.Station_Locations;
        -:  236:                      LineDestination: in TYPES.Station_Locations)
        -:  237:   is
      180:  238:      track: Tracks.Track;
        -:  239:   begin
      180:  240:      track.ID:=ID;
      180:  241:      track.Origin:= Origin;
      180:  242:      track.Destination:= Destination;
      180:  243:      track.TracksLineOrigin:= LineOrigin;
      180:  244:      track.TracksLineDestination:=LineDestination;
      180:  245:      if Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, ID).ID = 0 then
      180:  246:         if track.ID /=0 and track.Origin /=TYPES.No and track.Destination /= types.No and track.TrainID = 0 and track.TracksLineOrigin /=types.No and track.TracksLineDestination/= TYPES.No then
      180:  247:            Stations.LIST_TRACKS.APPEND(r_system.All_Tracks,track, ID);
        -:  248:         end if;
        -:  249:      end if;
        -:  250:
      180:  251:   end addTrack;
        -:  252:
        -:  253:   --------------
        -:  254:   -- addTrain --
        -:  255:   --------------
        -:  256:
       36:  257:   procedure addTrain (r_system: in out RailSystem;
        -:  258:                       ID: in Natural)
        -:  259:   is
       32:  260:      train: Trains.Train;
       32:  261:      ID_Out_Of_Range_Exception: Exception;
        -:  262:
        -:  263:   begin
        -:  264:      --        if ID <1 or ID>100 then
        -:  265:      --           Print("ADD TRAIN: ID should between 1 and 100");
        -:  266:      --           Raise ID_Out_Of_Range_Exception;
        -:  267:      --        end if;
       32:  268:      train.ID := ID;
       32:  269:      if LIST_TRAINS.GET_ELEMENT_BY_ID(r_system.All_Trains, ID).ID = 0 then
       32:  270:         if train.ID /=0 then
       32:  271:            LIST_TRAINS.APPEND(r_system.All_Trains, train,ID);
        -:  272:         end if;
        -:  273:
        -:  274:      end if;
       32:  275:   end addTrain;
        -:  276:
        -:  277:   ---------------------
        -:  278:   -- get train by id --
        -:  279:   ---------------------
       32:  280:   function getTrainById(r_system: in RailSystem; ID: in Natural)
        -:  281:                         return Trains.Train
        -:  282:   is
       28:  283:      Get_Train_By_ID_ID_Out_Of_Range_Exception: Exception;
       28:  284:      train: Trains.train;
        -:  285:   begin
       28:  286:      train:= RailSystems.LIST_TRAINS.GET_ELEMENT_BY_ID(r_system.All_Trains, ID);
       56:  287:      return train;
       32:  288:   end getTrainById;
        -:  289:
        -:  290:   ----------------
        -:  291:   -- addStation --
        -:  292:   ----------------
        -:  293:
      124:  294:   procedure addStation
        -:  295:     (r_system: in out RailSystem;
        -:  296:      ID: in Natural;
        -:  297:      Location: in TYPES.Station_Locations)
        -:  298:   is
      116:  299:      station: Stations.Station;
        -:  300:   begin
        -:  301:
      116:  302:      station.ID := ID;
      116:  303:      station.Location := Location;
      116:  304:      if LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations, ID).ID = 0 then
      116:  305:         if Station.Location /= TYPES.No then
      116:  306:            LIST_STATIONS.APPEND(r_system.All_Stations, station,ID);
        -:  307:         end if;
        -:  308:      end if;
        -:  309:
        -:  310:
        -:  311:
        -:  312:
      116:  313:   end addStation;
        -:  314:
        -:  315:
        -:  316:   --------------------------------------------
        -:  317:   -- replace Track ---------------------------
        -:  318:   --------------------------------------------
       36:  319:   procedure replaceTrack(r_system: in out RailSystem;
        -:  320:                          track: in Tracks.Track)
        -:  321:   is
        -:  322:   begin
       36:  323:         for i in 1..Stations.LIST_TRACKS.GET_SIZE(A => r_system.All_Tracks) loop
      504:  324:            if Stations.LIST_TRACKS.GET_ELEMENT(A        => r_system.All_Tracks,
      504:  325:                                                LOCATION => i).Origin = track.Origin
     1008:  326:              and  Stations.LIST_TRACKS.GET_ELEMENT(A        => r_system.All_Tracks,
      504:  327:                                                    LOCATION => i).Destination = track.Destination
     1008:  328:              and Stations.LIST_TRACKS.GET_ELEMENT(A        => r_system.All_Tracks,
      504:  329:                                                   LOCATION => i).ID = track.ID then
       36:  330:               Stations.LIST_TRACKS.REPLACE_BY_ID(r_system.All_Tracks,track.ID,track);
        -:  331:            end if;
        -:  332:
      504:  333:         end loop;
        -:  334:
       36:  335:   end replaceTrack;
        -:  336:
        -:  337:   --------------------------------------------
        -:  338:   -- replace Train ----------------------------
        -:  339:   --------------------------------------------
       44:  340:   procedure replaceTrain(r_system: in out RailSystem;
        -:  341:                          train: in Trains.Train)
        -:  342:   is
        -:  343:   begin
       44:  344:      if train.Location.Station.ID>0 and train.Location.Station.ID <101 then
       24:  345:         for i in 1.. LIST_TRAINS.GET_SIZE(A => r_system.All_Trains) loop
       46:  346:            if LIST_TRAINS.GET_ELEMENT(A        => r_system.All_Trains,
       46:  347:                                       LOCATION => i).ID = train.ID then
       24:  348:               LIST_TRAINS.REPLACE_BY_ID(r_system.All_Trains,train.ID,train);
        -:  349:            end if;
       46:  350:         end loop;
        -:  351:      end if;
        -:  352:
       44:  353:   end replaceTrain;
        -:  354:   --------------------------------------------
        -:  355:   -- replace Station -------------------------
        -:  356:   --------------------------------------------
      150:  357:   procedure replaceStation(r_system: in out RailSystem;
        -:  358:                            station: in Stations.Station)
        -:  359:   is
        -:  360:   begin
      150:  361:      if station.ID /=0 then
      150:  362:         for i in 1..LIST_STATIONS.GET_SIZE(A => r_system.All_Stations) loop
     1024:  363:            if LIST_STATIONS.GET_ELEMENT(A        => r_system.All_Stations,
     1024:  364:                                         LOCATION => i).Location = station.Location
     2048:  365:              and LIST_STATIONS.GET_ELEMENT(A        => r_system.All_Stations,
     1024:  366:                                            LOCATION => i).ID = station.ID then
      150:  367:               LIST_STATIONS.REPLACE_BY_ID(r_system.All_Stations,station.ID,station);
        -:  368:
        -:  369:            end if;
     1024:  370:            end loop;
        -:  371:         end if;
        -:  372:
      150:  373:      end replaceStation;
        -:  374:
        -:  375:
        -:  376:   -----------------------------------------
        -:  377:   -- addIncomingOutgoingTracksForStation --
        -:  378:   -----------------------------------------
       18:  379:   procedure addIncomingOutgoingTracksForEachStation(r_system: in out RailSystem)
        -:  380:   is
       18:  381:      tempStation: Stations.Station;
       18:  382:      tempTrack: Tracks.Track;
       18:  383:      od_record: TYPES.ODRecord;
        -:  384:      size: Natural;
        -:  385:      found: Boolean;
        -:  386:      --        NotFindIDException : Exception;
        -:  387:      --        AlreadyAddTrackException : Exception;
        -:  388:      --        StationIDNotExistException: Exception;
        -:  389:
        -:  390:   begin
        -:  391:
       18:  392:      for i in 1 .. LIST_STATIONS.GET_SIZE(r_system.All_Stations) loop
      104:  393:         tempStation:= LIST_STATIONS.GET_ELEMENT_BY_ID(r_system.All_Stations, i);
        -:  394:
      104:  395:         for j in 1 ..Stations.LIST_TRACKS.GET_SIZE(r_system.All_Tracks) loop
     1136:  396:            tempTrack:= Stations.LIST_TRACKS.GET_ELEMENT_BY_ID(r_system.All_Tracks, j);
     1136:  397:            if tempTrack.Origin = tempStation.Location then
      172:  398:               if Stations.LIST_TRACKS.CONTAINS(tempStation.Outgoing, tempTrack) = False then
      172:  399:                  if tempTrack.ID /=0 and tempTrack.Origin /=TYPES.No and tempTrack.Destination /= types.No and tempTrack.TrainID = 0 and tempTrack.TracksLineOrigin /=types.No and tempTrack.TracksLineDestination/= TYPES.No
      172:  400:                    and tempTrack.Origin /=tempTrack.Destination and tempTrack.TracksLineOrigin /= tempTrack.TracksLineDestination
        -:  401:                  then
      172:  402:                     if tempTrack.ID>0 and tempTrack.ID<101 then
      172:  403:                        Stations.LIST_TRACKS.APPEND(tempStation.Outgoing, tempTrack, tempTrack.ID);
        -:  404:                     end if;
        -:  405:
        -:  406:                  end if;
        -:  407:
      172:  408:                  od_record.Origin:= tempTrack.TracksLineOrigin;
      172:  409:                  od_record.Destination:=TempTrack.TracksLineDestination;
      172:  410:                  size:=TYPES.LIST_OD.GET_SIZE(tempStation.TracksLineOriginAndDestination);
      172:  411:                  if size<1 then
      104:  412:                     TYPES.LIST_OD.APPEND(tempStation.TracksLineOriginAndDestination, od_record,1);
        -:  413:                  elsif size>0 then
       68:  414:                     found:=False;
       68:  415:                     for w in 1 .. size loop
       68:  416:                        if (TYPES.LIST_OD.GET_ELEMENT(tempStation.TracksLineOriginAndDestination,w).Origin = od_record.Origin
       68:  417:                            and  TYPES.LIST_OD.GET_ELEMENT(tempStation.TracksLineOriginAndDestination,w).Destination = od_record.Destination)
      136:  418:                          or (TYPES.LIST_OD.GET_ELEMENT(tempStation.TracksLineOriginAndDestination,w).Origin = od_record.Destination
       68:  419:                              and  TYPES.LIST_OD.GET_ELEMENT(tempStation.TracksLineOriginAndDestination,w).Destination = od_record.Origin) then
       60:  420:                           found:=True;
        -:  421:                        end if;
       68:  422:                     end loop;
       68:  423:                     if found = False then
        8:  424:                        if od_record.Origin /= od_record.Destination then
        8:  425:                           TYPES.LIST_OD.APPEND(tempStation.TracksLineOriginAndDestination, od_record,1);
        -:  426:                        end if;
        -:  427:
        -:  428:                     end if;
        -:  429:                  end if;
        -:  430:               end if;
      964:  431:            elsif tempTrack.Destination = tempStation.Location then
      172:  432:               if Stations.LIST_TRACKS.CONTAINS(tempStation.Incoming, tempTrack) = False then
      172:  433:                  if tempTrack.ID /=0 and tempTrack.Origin /=TYPES.No and tempTrack.Destination /= types.No and tempTrack.TrainID = 0 and tempTrack.TracksLineOrigin /=types.No and tempTrack.TracksLineDestination/= TYPES.No
      172:  434:                    and tempTrack.TracksLineOrigin /= tempTrack.TracksLineDestination then
      172:  435:                     if tempTrack.ID>0 and tempTrack.ID<101 then
      172:  436:                        Stations.LIST_TRACKS.APPEND(tempStation.Incoming, tempTrack, tempTrack.ID);
        -:  437:                     end if;
        -:  438:
        -:  439:                  end if;
        -:  440:
        -:  441:               end if;
        -:  442:            end if;
     1136:  443:         end loop;
      104:  444:         if tempStation.ID>0 and tempStation.ID<101 and tempStation.Location /= TYPES.No then
      104:  445:            replaceStation(r_system,tempStation);
        -:  446:         end if;
        -:  447:
      104:  448:      end loop;
       18:  449:   end addIncomingOutgoingTracksForEachStation;
        -:  450:
        -:  451:end RailSystems;
